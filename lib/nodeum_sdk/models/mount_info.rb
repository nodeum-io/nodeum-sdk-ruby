=begin
#Nodeum API

## About  This document describes the Nodeum API version 2:  If you are looking for any information about the product itself, reach the product website https://www.nodeum.io. You can also contact us at this email address : info@nodeum.io  # Filter parameters When browsing a list of items, multiple filter parameters may be applied. Some operators can be added to the value as a prefix:  - `=` value is equal. Default operator, may be omitted  - `!=` value is different  - `>` greater than  - `>=` greater than or equal  - `<` lower than  - `>=` lower than or equal  - `><` included in list, items should be separated by `|`  - `!><` not included in list, items should be separated by `|`  - `~` pattern matching, may include `%` (any characters) and `_` (one character)  - `!~` pattern not matching, may include `%` (any characters) and `_` (one character)  

The version of the OpenAPI document: 2.1.0

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 4.3.0

=end

require 'date'

module Nodeum
  class MountInfo
    attr_accessor :id

    attr_accessor :major_minor

    attr_accessor :target

    attr_accessor :source

    attr_accessor :options

    attr_accessor :type

    attr_accessor :pool_id

    attr_accessor :pool_name

    attr_accessor :nas_id

    attr_accessor :nas_name

    attr_accessor :nas_share_id

    attr_accessor :nas_share_name

    attr_accessor :cloud_connector_id

    attr_accessor :cloud_connector_name

    attr_accessor :cloud_bucket_id

    attr_accessor :cloud_bucket_name

    attr_accessor :tape_id

    attr_accessor :tape_barcode

    attr_accessor :tape_library_id

    attr_accessor :tape_library_name

    attr_accessor :tape_library_serial

    class EnumAttributeValidator
      attr_reader :datatype
      attr_reader :allowable_values

      def initialize(datatype, allowable_values)
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.include?(value)
      end
    end

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'id' => :'id',
        :'major_minor' => :'major_minor',
        :'target' => :'target',
        :'source' => :'source',
        :'options' => :'options',
        :'type' => :'type',
        :'pool_id' => :'pool_id',
        :'pool_name' => :'pool_name',
        :'nas_id' => :'nas_id',
        :'nas_name' => :'nas_name',
        :'nas_share_id' => :'nas_share_id',
        :'nas_share_name' => :'nas_share_name',
        :'cloud_connector_id' => :'cloud_connector_id',
        :'cloud_connector_name' => :'cloud_connector_name',
        :'cloud_bucket_id' => :'cloud_bucket_id',
        :'cloud_bucket_name' => :'cloud_bucket_name',
        :'tape_id' => :'tape_id',
        :'tape_barcode' => :'tape_barcode',
        :'tape_library_id' => :'tape_library_id',
        :'tape_library_name' => :'tape_library_name',
        :'tape_library_serial' => :'tape_library_serial'
      }
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'id' => :'Integer',
        :'major_minor' => :'String',
        :'target' => :'String',
        :'source' => :'String',
        :'options' => :'String',
        :'type' => :'String',
        :'pool_id' => :'Integer',
        :'pool_name' => :'String',
        :'nas_id' => :'Integer',
        :'nas_name' => :'String',
        :'nas_share_id' => :'Integer',
        :'nas_share_name' => :'String',
        :'cloud_connector_id' => :'Integer',
        :'cloud_connector_name' => :'String',
        :'cloud_bucket_id' => :'Integer',
        :'cloud_bucket_name' => :'String',
        :'tape_id' => :'Integer',
        :'tape_barcode' => :'String',
        :'tape_library_id' => :'Integer',
        :'tape_library_name' => :'String',
        :'tape_library_serial' => :'String'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `Nodeum::MountInfo` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `Nodeum::MountInfo`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'id')
        self.id = attributes[:'id']
      end

      if attributes.key?(:'major_minor')
        self.major_minor = attributes[:'major_minor']
      end

      if attributes.key?(:'target')
        self.target = attributes[:'target']
      end

      if attributes.key?(:'source')
        self.source = attributes[:'source']
      end

      if attributes.key?(:'options')
        self.options = attributes[:'options']
      end

      if attributes.key?(:'type')
        self.type = attributes[:'type']
      end

      if attributes.key?(:'pool_id')
        self.pool_id = attributes[:'pool_id']
      end

      if attributes.key?(:'pool_name')
        self.pool_name = attributes[:'pool_name']
      end

      if attributes.key?(:'nas_id')
        self.nas_id = attributes[:'nas_id']
      end

      if attributes.key?(:'nas_name')
        self.nas_name = attributes[:'nas_name']
      end

      if attributes.key?(:'nas_share_id')
        self.nas_share_id = attributes[:'nas_share_id']
      end

      if attributes.key?(:'nas_share_name')
        self.nas_share_name = attributes[:'nas_share_name']
      end

      if attributes.key?(:'cloud_connector_id')
        self.cloud_connector_id = attributes[:'cloud_connector_id']
      end

      if attributes.key?(:'cloud_connector_name')
        self.cloud_connector_name = attributes[:'cloud_connector_name']
      end

      if attributes.key?(:'cloud_bucket_id')
        self.cloud_bucket_id = attributes[:'cloud_bucket_id']
      end

      if attributes.key?(:'cloud_bucket_name')
        self.cloud_bucket_name = attributes[:'cloud_bucket_name']
      end

      if attributes.key?(:'tape_id')
        self.tape_id = attributes[:'tape_id']
      end

      if attributes.key?(:'tape_barcode')
        self.tape_barcode = attributes[:'tape_barcode']
      end

      if attributes.key?(:'tape_library_id')
        self.tape_library_id = attributes[:'tape_library_id']
      end

      if attributes.key?(:'tape_library_name')
        self.tape_library_name = attributes[:'tape_library_name']
      end

      if attributes.key?(:'tape_library_serial')
        self.tape_library_serial = attributes[:'tape_library_serial']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      type_validator = EnumAttributeValidator.new('String', ["cifs", "nfs", "fuse.s3fs", "fuse.core_fuse", "fuse"])
      return false unless type_validator.valid?(@type)
      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] type Object to be assigned
    def type=(type)
      validator = EnumAttributeValidator.new('String', ["cifs", "nfs", "fuse.s3fs", "fuse.core_fuse", "fuse"])
      unless validator.valid?(type)
        fail ArgumentError, "invalid value for \"type\", must be one of #{validator.allowable_values}."
      end
      @type = type
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          id == o.id &&
          major_minor == o.major_minor &&
          target == o.target &&
          source == o.source &&
          options == o.options &&
          type == o.type &&
          pool_id == o.pool_id &&
          pool_name == o.pool_name &&
          nas_id == o.nas_id &&
          nas_name == o.nas_name &&
          nas_share_id == o.nas_share_id &&
          nas_share_name == o.nas_share_name &&
          cloud_connector_id == o.cloud_connector_id &&
          cloud_connector_name == o.cloud_connector_name &&
          cloud_bucket_id == o.cloud_bucket_id &&
          cloud_bucket_name == o.cloud_bucket_name &&
          tape_id == o.tape_id &&
          tape_barcode == o.tape_barcode &&
          tape_library_id == o.tape_library_id &&
          tape_library_name == o.tape_library_name &&
          tape_library_serial == o.tape_library_serial
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [id, major_minor, target, source, options, type, pool_id, pool_name, nas_id, nas_name, nas_share_id, nas_share_name, cloud_connector_id, cloud_connector_name, cloud_bucket_id, cloud_bucket_name, tape_id, tape_barcode, tape_library_id, tape_library_name, tape_library_serial].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.openapi_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        Nodeum.const_get(type).build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end
        
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
