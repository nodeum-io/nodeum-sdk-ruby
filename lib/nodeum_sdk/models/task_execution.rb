=begin
#Nodeum API

#The Nodeum API makes it easy to tap into the digital data mesh that runs across your organisation. Make requests to our API endpoints and we’ll give you everything you need to interconnect your business workflows with your storage.  All production API requests are made to:  http://nodeumhostname/api/  The current production version of the API is v1.   **REST** The Nodeum API is a RESTful API. This means that the API is designed to allow you to get, create, update, & delete objects with the HTTP verbs GET, POST, PUT, PATCH, & DELETE.  **JSON** The Nodeum API speaks exclusively in JSON. This means that you should always set the Content-Type header to application/json to ensure that your requests are properly accepted and processed by the API.  **Authentication** All API calls require user-password authentication.   **Cross-Origin Resource Sharing** The Nodeum API supports CORS for communicating from Javascript for these endpoints. You will need to specify an Origin URI when creating your application to allow for CORS to be whitelisted for your domain.   **Pagination** Some endpoints such as File Listing return a potentially lengthy array of objects. In order to keep the response sizes manageable the API will take advantage of pagination. Pagination is a mechanism for returning a subset of the results for a request and allowing for subsequent requests to “page” through the rest of the results until the end is reached. Paginated endpoints follow a standard interface that accepts two query parameters, limit and offset, and return a payload that follows a standard form. These parameters names and their behavior are borrowed from SQL LIMIT and OFFSET keywords.  **Versioning** The Nodeum API is constantly being worked on to add features, make improvements, and fix bugs. This means that you should expect changes to be introduced and documented.   However, there are some changes or additions that are considered backwards-compatible and your applications should be flexible enough to handle them. These include:  - Adding new endpoints to the API - Adding new attributes to the response of an existing endpoint - Changing the order of attributes of responses (JSON by definition is an object of unordered key/value pairs)  **Filter parameters** When browsing a list of items, multiple filter parameters may be applied. Some operators can be added to the value as a prefix:  - `=` value is equal. Default operator, may be omitted  - `!=` value is different  - `>` greater than  - `>=` greater than or equal  - `<` lower than  - `>=` lower than or equal  - `><` included in list, items should be separated by `|`  - `!><` not included in list, items should be separated by `|`  - `~` pattern matching, may include `%` (any characters) and `_` (one character)  - `!~` pattern not matching, may include `%` (any characters) and `_` (one character)  

The version of the OpenAPI document: 2.1.0
Contact: info@nodeum.io
Generated by: https://openapi-generator.tech
OpenAPI Generator version: 4.3.0

=end

require 'date'

module Nodeum
  class TaskExecution
    attr_accessor :id

    attr_accessor :task_id

    attr_accessor :name

    attr_accessor :workflow_type

    attr_accessor :workflow_action

    attr_accessor :source_type

    attr_accessor :destination_type

    attr_accessor :status

    attr_accessor :log_time

    attr_accessor :job_started

    attr_accessor :job_finished

    attr_accessor :to_process_size

    attr_accessor :processed_size

    attr_accessor :to_process_files

    attr_accessor :processed_files

    attr_accessor :finalized_files

    attr_accessor :estimation_time

    attr_accessor :bandwidth

    class EnumAttributeValidator
      attr_reader :datatype
      attr_reader :allowable_values

      def initialize(datatype, allowable_values)
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.include?(value)
      end
    end

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'id' => :'id',
        :'task_id' => :'task_id',
        :'name' => :'name',
        :'workflow_type' => :'workflow_type',
        :'workflow_action' => :'workflow_action',
        :'source_type' => :'source_type',
        :'destination_type' => :'destination_type',
        :'status' => :'status',
        :'log_time' => :'log_time',
        :'job_started' => :'job_started',
        :'job_finished' => :'job_finished',
        :'to_process_size' => :'to_process_size',
        :'processed_size' => :'processed_size',
        :'to_process_files' => :'to_process_files',
        :'processed_files' => :'processed_files',
        :'finalized_files' => :'finalized_files',
        :'estimation_time' => :'estimation_time',
        :'bandwidth' => :'bandwidth'
      }
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'id' => :'String',
        :'task_id' => :'Integer',
        :'name' => :'String',
        :'workflow_type' => :'String',
        :'workflow_action' => :'String',
        :'source_type' => :'String',
        :'destination_type' => :'String',
        :'status' => :'String',
        :'log_time' => :'String',
        :'job_started' => :'String',
        :'job_finished' => :'String',
        :'to_process_size' => :'Integer',
        :'processed_size' => :'Integer',
        :'to_process_files' => :'Integer',
        :'processed_files' => :'Integer',
        :'finalized_files' => :'Integer',
        :'estimation_time' => :'Integer',
        :'bandwidth' => :'Integer'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `Nodeum::TaskExecution` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `Nodeum::TaskExecution`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'id')
        self.id = attributes[:'id']
      end

      if attributes.key?(:'task_id')
        self.task_id = attributes[:'task_id']
      end

      if attributes.key?(:'name')
        self.name = attributes[:'name']
      end

      if attributes.key?(:'workflow_type')
        self.workflow_type = attributes[:'workflow_type']
      end

      if attributes.key?(:'workflow_action')
        self.workflow_action = attributes[:'workflow_action']
      end

      if attributes.key?(:'source_type')
        self.source_type = attributes[:'source_type']
      end

      if attributes.key?(:'destination_type')
        self.destination_type = attributes[:'destination_type']
      end

      if attributes.key?(:'status')
        self.status = attributes[:'status']
      end

      if attributes.key?(:'log_time')
        self.log_time = attributes[:'log_time']
      end

      if attributes.key?(:'job_started')
        self.job_started = attributes[:'job_started']
      end

      if attributes.key?(:'job_finished')
        self.job_finished = attributes[:'job_finished']
      end

      if attributes.key?(:'to_process_size')
        self.to_process_size = attributes[:'to_process_size']
      end

      if attributes.key?(:'processed_size')
        self.processed_size = attributes[:'processed_size']
      end

      if attributes.key?(:'to_process_files')
        self.to_process_files = attributes[:'to_process_files']
      end

      if attributes.key?(:'processed_files')
        self.processed_files = attributes[:'processed_files']
      end

      if attributes.key?(:'finalized_files')
        self.finalized_files = attributes[:'finalized_files']
      end

      if attributes.key?(:'estimation_time')
        self.estimation_time = attributes[:'estimation_time']
      end

      if attributes.key?(:'bandwidth')
        self.bandwidth = attributes[:'bandwidth']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      workflow_type_validator = EnumAttributeValidator.new('String', ["active_archive", "offline_archive", "data_exchange", "data_migration", "maintenance", "data_enrichment"])
      return false unless workflow_type_validator.valid?(@workflow_type)
      workflow_action_validator = EnumAttributeValidator.new('String', ["copy", "move", "erase", "scan", "rehydratation", "format", "check_consistency", "duplication", "cache_cleaning", "ejection", "get_index", "full_backup", "incremental_backup"])
      return false unless workflow_action_validator.valid?(@workflow_action)
      source_type_validator = EnumAttributeValidator.new('String', ["container", "primary_nas", "secondary_nas", "primary_cloud", "secondary_cloud", "secondary_tape"])
      return false unless source_type_validator.valid?(@source_type)
      destination_type_validator = EnumAttributeValidator.new('String', ["container", "primary_nas", "secondary_nas", "primary_cloud", "secondary_cloud", "secondary_tape"])
      return false unless destination_type_validator.valid?(@destination_type)
      status_validator = EnumAttributeValidator.new('String', ["not_activated", "done", "in_progress", "error", "paused", "stopped_by_system", "in_queue", "finished_with_warnings", "calculating", "stopped_by_user"])
      return false unless status_validator.valid?(@status)
      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] workflow_type Object to be assigned
    def workflow_type=(workflow_type)
      validator = EnumAttributeValidator.new('String', ["active_archive", "offline_archive", "data_exchange", "data_migration", "maintenance", "data_enrichment"])
      unless validator.valid?(workflow_type)
        fail ArgumentError, "invalid value for \"workflow_type\", must be one of #{validator.allowable_values}."
      end
      @workflow_type = workflow_type
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] workflow_action Object to be assigned
    def workflow_action=(workflow_action)
      validator = EnumAttributeValidator.new('String', ["copy", "move", "erase", "scan", "rehydratation", "format", "check_consistency", "duplication", "cache_cleaning", "ejection", "get_index", "full_backup", "incremental_backup"])
      unless validator.valid?(workflow_action)
        fail ArgumentError, "invalid value for \"workflow_action\", must be one of #{validator.allowable_values}."
      end
      @workflow_action = workflow_action
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] source_type Object to be assigned
    def source_type=(source_type)
      validator = EnumAttributeValidator.new('String', ["container", "primary_nas", "secondary_nas", "primary_cloud", "secondary_cloud", "secondary_tape"])
      unless validator.valid?(source_type)
        fail ArgumentError, "invalid value for \"source_type\", must be one of #{validator.allowable_values}."
      end
      @source_type = source_type
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] destination_type Object to be assigned
    def destination_type=(destination_type)
      validator = EnumAttributeValidator.new('String', ["container", "primary_nas", "secondary_nas", "primary_cloud", "secondary_cloud", "secondary_tape"])
      unless validator.valid?(destination_type)
        fail ArgumentError, "invalid value for \"destination_type\", must be one of #{validator.allowable_values}."
      end
      @destination_type = destination_type
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] status Object to be assigned
    def status=(status)
      validator = EnumAttributeValidator.new('String', ["not_activated", "done", "in_progress", "error", "paused", "stopped_by_system", "in_queue", "finished_with_warnings", "calculating", "stopped_by_user"])
      unless validator.valid?(status)
        fail ArgumentError, "invalid value for \"status\", must be one of #{validator.allowable_values}."
      end
      @status = status
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          id == o.id &&
          task_id == o.task_id &&
          name == o.name &&
          workflow_type == o.workflow_type &&
          workflow_action == o.workflow_action &&
          source_type == o.source_type &&
          destination_type == o.destination_type &&
          status == o.status &&
          log_time == o.log_time &&
          job_started == o.job_started &&
          job_finished == o.job_finished &&
          to_process_size == o.to_process_size &&
          processed_size == o.processed_size &&
          to_process_files == o.to_process_files &&
          processed_files == o.processed_files &&
          finalized_files == o.finalized_files &&
          estimation_time == o.estimation_time &&
          bandwidth == o.bandwidth
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [id, task_id, name, workflow_type, workflow_action, source_type, destination_type, status, log_time, job_started, job_finished, to_process_size, processed_size, to_process_files, processed_files, finalized_files, estimation_time, bandwidth].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.openapi_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        Nodeum.const_get(type).build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end
        
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
