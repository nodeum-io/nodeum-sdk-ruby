=begin
#Nodeum API

## About  This document describes the Nodeum API version 2:  If you are looking for any information about the product itself, reach the product website https://www.nodeum.io. You can also contact us at this email address : info@nodeum.io  # Filter parameters When browsing a list of items, multiple filter parameters may be applied. Some operators can be added to the value as a prefix:  - `=` value is equal. Default operator, may be omitted  - `!=` value is different  - `>` greater than  - `>=` greater than or equal  - `<` lower than  - `>=` lower than or equal  - `><` included in list, items should be separated by `|`  - `!><` not included in list, items should be separated by `|`  - `~` pattern matching, may include `%` (any characters) and `_` (one character)  - `!~` pattern not matching, may include `%` (any characters) and `_` (one character)  

The version of the OpenAPI document: 2.1.0

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 4.3.0

=end

require 'cgi'

module Nodeum
  class UsersApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Creates a new API Key for current user.
    # **API Key Scope**: api_keys / create
    # @param api_key_body [ApiKeyFull] 
    # @param [Hash] opts the optional parameters
    # @return [ApiKeyFull]
    def create_api_key(api_key_body, opts = {})
      data, _status_code, _headers = create_api_key_with_http_info(api_key_body, opts)
      data
    end

    # Creates a new API Key for current user.
    # **API Key Scope**: api_keys / create
    # @param api_key_body [ApiKeyFull] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(ApiKeyFull, Integer, Hash)>] ApiKeyFull data, response status code and response headers
    def create_api_key_with_http_info(api_key_body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UsersApi.create_api_key ...'
      end
      # verify the required parameter 'api_key_body' is set
      if @api_client.config.client_side_validation && api_key_body.nil?
        fail ArgumentError, "Missing the required parameter 'api_key_body' when calling UsersApi.create_api_key"
      end
      # resource path
      local_var_path = '/users/me/api_keys'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(api_key_body) 

      # return_type
      return_type = opts[:return_type] || 'ApiKeyFull' 

      # auth_names
      auth_names = opts[:auth_names] || ['BasicAuth', 'BearerAuth']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UsersApi#create_api_key\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Destroys a specific API Key.
    # **API Key Scope**: api_keys / destroy
    # @param api_key_id [Integer] Numeric ID of API Key.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def destroy_api_key(api_key_id, opts = {})
      destroy_api_key_with_http_info(api_key_id, opts)
      nil
    end

    # Destroys a specific API Key.
    # **API Key Scope**: api_keys / destroy
    # @param api_key_id [Integer] Numeric ID of API Key.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def destroy_api_key_with_http_info(api_key_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UsersApi.destroy_api_key ...'
      end
      # verify the required parameter 'api_key_id' is set
      if @api_client.config.client_side_validation && api_key_id.nil?
        fail ArgumentError, "Missing the required parameter 'api_key_id' when calling UsersApi.destroy_api_key"
      end
      # resource path
      local_var_path = '/users/me/api_keys/{api_key_id}'.sub('{' + 'api_key_id' + '}', CGI.escape(api_key_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || ['BasicAuth', 'BearerAuth']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UsersApi#destroy_api_key\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Lists all API keys of current user.
    # **API Key Scope**: api_keys / index
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :limit The number of items to display for pagination.
    # @option opts [Integer] :offset The number of items to skip for pagination.
    # @return [ApiKeyCollection]
    def index_api_keys(opts = {})
      data, _status_code, _headers = index_api_keys_with_http_info(opts)
      data
    end

    # Lists all API keys of current user.
    # **API Key Scope**: api_keys / index
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :limit The number of items to display for pagination.
    # @option opts [Integer] :offset The number of items to skip for pagination.
    # @return [Array<(ApiKeyCollection, Integer, Hash)>] ApiKeyCollection data, response status code and response headers
    def index_api_keys_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UsersApi.index_api_keys ...'
      end
      # resource path
      local_var_path = '/users/me/api_keys'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'ApiKeyCollection' 

      # auth_names
      auth_names = opts[:auth_names] || ['BasicAuth', 'BearerAuth']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UsersApi#index_api_keys\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List all system groups.
    # **API Key Scope**: groups / systems
    # @param [Hash] opts the optional parameters
    # @return [SystemGroupCollection]
    def index_system_groups(opts = {})
      data, _status_code, _headers = index_system_groups_with_http_info(opts)
      data
    end

    # List all system groups.
    # **API Key Scope**: groups / systems
    # @param [Hash] opts the optional parameters
    # @return [Array<(SystemGroupCollection, Integer, Hash)>] SystemGroupCollection data, response status code and response headers
    def index_system_groups_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UsersApi.index_system_groups ...'
      end
      # resource path
      local_var_path = '/groups/-/systems'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'SystemGroupCollection' 

      # auth_names
      auth_names = opts[:auth_names] || ['BasicAuth', 'BearerAuth']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UsersApi#index_system_groups\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List all system users.
    # **API Key Scope**: users / systems
    # @param [Hash] opts the optional parameters
    # @return [SystemUserCollection]
    def index_system_users(opts = {})
      data, _status_code, _headers = index_system_users_with_http_info(opts)
      data
    end

    # List all system users.
    # **API Key Scope**: users / systems
    # @param [Hash] opts the optional parameters
    # @return [Array<(SystemUserCollection, Integer, Hash)>] SystemUserCollection data, response status code and response headers
    def index_system_users_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UsersApi.index_system_users ...'
      end
      # resource path
      local_var_path = '/users/-/systems'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'SystemUserCollection' 

      # auth_names
      auth_names = opts[:auth_names] || ['BasicAuth', 'BearerAuth']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UsersApi#index_system_users\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Displays a specific API Key with its scopes.
    # **API Key Scope**: api_keys / show
    # @param api_key_id [Integer] Numeric ID of API Key.
    # @param [Hash] opts the optional parameters
    # @return [ApiKeyFull]
    def show_api_key(api_key_id, opts = {})
      data, _status_code, _headers = show_api_key_with_http_info(api_key_id, opts)
      data
    end

    # Displays a specific API Key with its scopes.
    # **API Key Scope**: api_keys / show
    # @param api_key_id [Integer] Numeric ID of API Key.
    # @param [Hash] opts the optional parameters
    # @return [Array<(ApiKeyFull, Integer, Hash)>] ApiKeyFull data, response status code and response headers
    def show_api_key_with_http_info(api_key_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UsersApi.show_api_key ...'
      end
      # verify the required parameter 'api_key_id' is set
      if @api_client.config.client_side_validation && api_key_id.nil?
        fail ArgumentError, "Missing the required parameter 'api_key_id' when calling UsersApi.show_api_key"
      end
      # resource path
      local_var_path = '/users/me/api_keys/{api_key_id}'.sub('{' + 'api_key_id' + '}', CGI.escape(api_key_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'ApiKeyFull' 

      # auth_names
      auth_names = opts[:auth_names] || ['BasicAuth', 'BearerAuth']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UsersApi#show_api_key\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Updates a specific API Key.
    # **API Key Scope**: api_keys / update
    # @param api_key_id [Integer] Numeric ID of API Key.
    # @param api_key_body [ApiKeyFull] 
    # @param [Hash] opts the optional parameters
    # @return [ApiKeyFull]
    def update_api_key(api_key_id, api_key_body, opts = {})
      data, _status_code, _headers = update_api_key_with_http_info(api_key_id, api_key_body, opts)
      data
    end

    # Updates a specific API Key.
    # **API Key Scope**: api_keys / update
    # @param api_key_id [Integer] Numeric ID of API Key.
    # @param api_key_body [ApiKeyFull] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(ApiKeyFull, Integer, Hash)>] ApiKeyFull data, response status code and response headers
    def update_api_key_with_http_info(api_key_id, api_key_body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UsersApi.update_api_key ...'
      end
      # verify the required parameter 'api_key_id' is set
      if @api_client.config.client_side_validation && api_key_id.nil?
        fail ArgumentError, "Missing the required parameter 'api_key_id' when calling UsersApi.update_api_key"
      end
      # verify the required parameter 'api_key_body' is set
      if @api_client.config.client_side_validation && api_key_body.nil?
        fail ArgumentError, "Missing the required parameter 'api_key_body' when calling UsersApi.update_api_key"
      end
      # resource path
      local_var_path = '/users/me/api_keys/{api_key_id}'.sub('{' + 'api_key_id' + '}', CGI.escape(api_key_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(api_key_body) 

      # return_type
      return_type = opts[:return_type] || 'ApiKeyFull' 

      # auth_names
      auth_names = opts[:auth_names] || ['BasicAuth', 'BearerAuth']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UsersApi#update_api_key\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
