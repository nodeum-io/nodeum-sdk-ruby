=begin
#Nodeum API

#The Nodeum API makes it easy to tap into the digital data mesh that runs across your organisation. Make requests to our API endpoints and we’ll give you everything you need to interconnect your business workflows with your storage.  All production API requests are made to:  http://nodeumhostname/api/  The current production version of the API is v1.   **REST** The Nodeum API is a RESTful API. This means that the API is designed to allow you to get, create, update, & delete objects with the HTTP verbs GET, POST, PUT, PATCH, & DELETE.  **JSON** The Nodeum API speaks exclusively in JSON. This means that you should always set the Content-Type header to application/json to ensure that your requests are properly accepted and processed by the API.  **Authentication** All API calls require user-password authentication.   **Cross-Origin Resource Sharing** The Nodeum API supports CORS for communicating from Javascript for these endpoints. You will need to specify an Origin URI when creating your application to allow for CORS to be whitelisted for your domain.   **Pagination** Some endpoints such as File Listing return a potentially lengthy array of objects. In order to keep the response sizes manageable the API will take advantage of pagination. Pagination is a mechanism for returning a subset of the results for a request and allowing for subsequent requests to “page” through the rest of the results until the end is reached. Paginated endpoints follow a standard interface that accepts two query parameters, limit and offset, and return a payload that follows a standard form. These parameters names and their behavior are borrowed from SQL LIMIT and OFFSET keywords.  **Versioning** The Nodeum API is constantly being worked on to add features, make improvements, and fix bugs. This means that you should expect changes to be introduced and documented.   However, there are some changes or additions that are considered backwards-compatible and your applications should be flexible enough to handle them. These include:  - Adding new endpoints to the API - Adding new attributes to the response of an existing endpoint - Changing the order of attributes of responses (JSON by definition is an object of unordered key/value pairs)  **Filter parameters** When browsing a list of items, multiple filter parameters may be applied. Some operators can be added to the value as a prefix:  - `=` value is equal. Default operator, may be omitted  - `!=` value is different  - `>` greater than  - `>=` greater than or equal  - `<` lower than  - `>=` lower than or equal  - `><` included in list, items should be separated by `|`  - `!><` not included in list, items should be separated by `|`  - `~` pattern matching, may include `%` (any characters) and `_` (one character)  - `!~` pattern not matching, may include `%` (any characters) and `_` (one character)  

The version of the OpenAPI document: 2.1.0
Contact: info@nodeum.io
Generated by: https://openapi-generator.tech
OpenAPI Generator version: 4.3.0

=end

require 'cgi'

module Nodeum
  class CloudBucketsApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Lists all cloud buckets.
    # **API Key Scope**: cloud_buckets / index
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :limit The number of items to display for pagination.
    # @option opts [Integer] :offset The number of items to skip for pagination.
    # @option opts [Array<String>] :sort_by Sort results by attribute.  Can sort on multiple attributes, separated by &#x60;|&#x60;. Order direction can be suffixing the attribute by either &#x60;:asc&#x60; (default) or &#x60;:desc&#x60;.
    # @option opts [String] :id Filter on id
    # @option opts [String] :cloud_connector_id Filter on cloud connector id
    # @option opts [String] :pool_id Filter on a pool id
    # @option opts [String] :name Filter on name
    # @option opts [String] :location Filter on location
    # @option opts [String] :price Filter on price
    # @return [CloudBucketCollection]
    def index_cloud_buckets(opts = {})
      data, _status_code, _headers = index_cloud_buckets_with_http_info(opts)
      data
    end

    # Lists all cloud buckets.
    # **API Key Scope**: cloud_buckets / index
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :limit The number of items to display for pagination.
    # @option opts [Integer] :offset The number of items to skip for pagination.
    # @option opts [Array<String>] :sort_by Sort results by attribute.  Can sort on multiple attributes, separated by &#x60;|&#x60;. Order direction can be suffixing the attribute by either &#x60;:asc&#x60; (default) or &#x60;:desc&#x60;.
    # @option opts [String] :id Filter on id
    # @option opts [String] :cloud_connector_id Filter on cloud connector id
    # @option opts [String] :pool_id Filter on a pool id
    # @option opts [String] :name Filter on name
    # @option opts [String] :location Filter on location
    # @option opts [String] :price Filter on price
    # @return [Array<(CloudBucketCollection, Integer, Hash)>] CloudBucketCollection data, response status code and response headers
    def index_cloud_buckets_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CloudBucketsApi.index_cloud_buckets ...'
      end
      # resource path
      local_var_path = '/cloud_buckets'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?
      query_params[:'sort_by'] = @api_client.build_collection_param(opts[:'sort_by'], :pipe) if !opts[:'sort_by'].nil?
      query_params[:'id'] = opts[:'id'] if !opts[:'id'].nil?
      query_params[:'cloud_connector_id'] = opts[:'cloud_connector_id'] if !opts[:'cloud_connector_id'].nil?
      query_params[:'pool_id'] = opts[:'pool_id'] if !opts[:'pool_id'].nil?
      query_params[:'name'] = opts[:'name'] if !opts[:'name'].nil?
      query_params[:'location'] = opts[:'location'] if !opts[:'location'].nil?
      query_params[:'price'] = opts[:'price'] if !opts[:'price'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'CloudBucketCollection' 

      # auth_names
      auth_names = opts[:auth_names] || ['BasicAuth', 'BearerAuth']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CloudBucketsApi#index_cloud_buckets\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Lists all cloud buckets.
    # **API Key Scope**: cloud_buckets / index
    # @param cloud_connector_id [String] Numeric ID or name of cloud connector.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :limit The number of items to display for pagination.
    # @option opts [Integer] :offset The number of items to skip for pagination.
    # @option opts [Array<String>] :sort_by Sort results by attribute.  Can sort on multiple attributes, separated by &#x60;|&#x60;. Order direction can be suffixing the attribute by either &#x60;:asc&#x60; (default) or &#x60;:desc&#x60;.
    # @option opts [String] :id Filter on id
    # @option opts [String] :pool_id Filter on a pool id
    # @option opts [String] :name Filter on name
    # @option opts [String] :location Filter on location
    # @option opts [String] :price Filter on price
    # @return [CloudBucketCollection]
    def index_cloud_buckets_by_cloud_connector(cloud_connector_id, opts = {})
      data, _status_code, _headers = index_cloud_buckets_by_cloud_connector_with_http_info(cloud_connector_id, opts)
      data
    end

    # Lists all cloud buckets.
    # **API Key Scope**: cloud_buckets / index
    # @param cloud_connector_id [String] Numeric ID or name of cloud connector.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :limit The number of items to display for pagination.
    # @option opts [Integer] :offset The number of items to skip for pagination.
    # @option opts [Array<String>] :sort_by Sort results by attribute.  Can sort on multiple attributes, separated by &#x60;|&#x60;. Order direction can be suffixing the attribute by either &#x60;:asc&#x60; (default) or &#x60;:desc&#x60;.
    # @option opts [String] :id Filter on id
    # @option opts [String] :pool_id Filter on a pool id
    # @option opts [String] :name Filter on name
    # @option opts [String] :location Filter on location
    # @option opts [String] :price Filter on price
    # @return [Array<(CloudBucketCollection, Integer, Hash)>] CloudBucketCollection data, response status code and response headers
    def index_cloud_buckets_by_cloud_connector_with_http_info(cloud_connector_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CloudBucketsApi.index_cloud_buckets_by_cloud_connector ...'
      end
      # verify the required parameter 'cloud_connector_id' is set
      if @api_client.config.client_side_validation && cloud_connector_id.nil?
        fail ArgumentError, "Missing the required parameter 'cloud_connector_id' when calling CloudBucketsApi.index_cloud_buckets_by_cloud_connector"
      end
      # resource path
      local_var_path = '/cloud_connectors/{cloud_connector_id}/cloud_buckets'.sub('{' + 'cloud_connector_id' + '}', CGI.escape(cloud_connector_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?
      query_params[:'sort_by'] = @api_client.build_collection_param(opts[:'sort_by'], :pipe) if !opts[:'sort_by'].nil?
      query_params[:'id'] = opts[:'id'] if !opts[:'id'].nil?
      query_params[:'pool_id'] = opts[:'pool_id'] if !opts[:'pool_id'].nil?
      query_params[:'name'] = opts[:'name'] if !opts[:'name'].nil?
      query_params[:'location'] = opts[:'location'] if !opts[:'location'].nil?
      query_params[:'price'] = opts[:'price'] if !opts[:'price'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'CloudBucketCollection' 

      # auth_names
      auth_names = opts[:auth_names] || ['BasicAuth', 'BearerAuth']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CloudBucketsApi#index_cloud_buckets_by_cloud_connector\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Lists all cloud buckets from pool.
    # **API Key Scope**: cloud_buckets / index
    # @param pool_id [String] Numeric ID, or name of pool.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :limit The number of items to display for pagination.
    # @option opts [Integer] :offset The number of items to skip for pagination.
    # @option opts [Array<String>] :sort_by Sort results by attribute.  Can sort on multiple attributes, separated by &#x60;|&#x60;. Order direction can be suffixing the attribute by either &#x60;:asc&#x60; (default) or &#x60;:desc&#x60;.
    # @option opts [String] :id Filter on id
    # @option opts [String] :cloud_connector_id Filter on cloud connector id
    # @option opts [String] :name Filter on name
    # @option opts [String] :location Filter on location
    # @option opts [String] :price Filter on price
    # @return [CloudBucketCollection]
    def index_cloud_buckets_by_pool(pool_id, opts = {})
      data, _status_code, _headers = index_cloud_buckets_by_pool_with_http_info(pool_id, opts)
      data
    end

    # Lists all cloud buckets from pool.
    # **API Key Scope**: cloud_buckets / index
    # @param pool_id [String] Numeric ID, or name of pool.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :limit The number of items to display for pagination.
    # @option opts [Integer] :offset The number of items to skip for pagination.
    # @option opts [Array<String>] :sort_by Sort results by attribute.  Can sort on multiple attributes, separated by &#x60;|&#x60;. Order direction can be suffixing the attribute by either &#x60;:asc&#x60; (default) or &#x60;:desc&#x60;.
    # @option opts [String] :id Filter on id
    # @option opts [String] :cloud_connector_id Filter on cloud connector id
    # @option opts [String] :name Filter on name
    # @option opts [String] :location Filter on location
    # @option opts [String] :price Filter on price
    # @return [Array<(CloudBucketCollection, Integer, Hash)>] CloudBucketCollection data, response status code and response headers
    def index_cloud_buckets_by_pool_with_http_info(pool_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CloudBucketsApi.index_cloud_buckets_by_pool ...'
      end
      # verify the required parameter 'pool_id' is set
      if @api_client.config.client_side_validation && pool_id.nil?
        fail ArgumentError, "Missing the required parameter 'pool_id' when calling CloudBucketsApi.index_cloud_buckets_by_pool"
      end
      # resource path
      local_var_path = '/pools/{pool_id}/cloud_buckets'.sub('{' + 'pool_id' + '}', CGI.escape(pool_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?
      query_params[:'sort_by'] = @api_client.build_collection_param(opts[:'sort_by'], :pipe) if !opts[:'sort_by'].nil?
      query_params[:'id'] = opts[:'id'] if !opts[:'id'].nil?
      query_params[:'cloud_connector_id'] = opts[:'cloud_connector_id'] if !opts[:'cloud_connector_id'].nil?
      query_params[:'name'] = opts[:'name'] if !opts[:'name'].nil?
      query_params[:'location'] = opts[:'location'] if !opts[:'location'].nil?
      query_params[:'price'] = opts[:'price'] if !opts[:'price'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'CloudBucketCollection' 

      # auth_names
      auth_names = opts[:auth_names] || ['BasicAuth', 'BearerAuth']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CloudBucketsApi#index_cloud_buckets_by_pool\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get mount status of Cloud bucket.
    # **API Key Scope**: cloud_buckets / mount_status
    # @param cloud_bucket_id [String] Numeric ID or name of cloud bucket.
    # @param [Hash] opts the optional parameters
    # @return [MountStatus]
    def mount_status_cloud_bucket(cloud_bucket_id, opts = {})
      data, _status_code, _headers = mount_status_cloud_bucket_with_http_info(cloud_bucket_id, opts)
      data
    end

    # Get mount status of Cloud bucket.
    # **API Key Scope**: cloud_buckets / mount_status
    # @param cloud_bucket_id [String] Numeric ID or name of cloud bucket.
    # @param [Hash] opts the optional parameters
    # @return [Array<(MountStatus, Integer, Hash)>] MountStatus data, response status code and response headers
    def mount_status_cloud_bucket_with_http_info(cloud_bucket_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CloudBucketsApi.mount_status_cloud_bucket ...'
      end
      # verify the required parameter 'cloud_bucket_id' is set
      if @api_client.config.client_side_validation && cloud_bucket_id.nil?
        fail ArgumentError, "Missing the required parameter 'cloud_bucket_id' when calling CloudBucketsApi.mount_status_cloud_bucket"
      end
      # resource path
      local_var_path = '/cloud_buckets/{cloud_bucket_id}/mount'.sub('{' + 'cloud_bucket_id' + '}', CGI.escape(cloud_bucket_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'MountStatus' 

      # auth_names
      auth_names = opts[:auth_names] || ['BasicAuth', 'BearerAuth']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CloudBucketsApi#mount_status_cloud_bucket\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get mount status of Cloud bucket.
    # **API Key Scope**: cloud_buckets / mount_status
    # @param cloud_connector_id [String] Numeric ID or name of cloud connector.
    # @param cloud_bucket_id [String] Numeric ID or name of cloud bucket.
    # @param [Hash] opts the optional parameters
    # @return [MountStatus]
    def mount_status_cloud_bucket_by_cloud_connector(cloud_connector_id, cloud_bucket_id, opts = {})
      data, _status_code, _headers = mount_status_cloud_bucket_by_cloud_connector_with_http_info(cloud_connector_id, cloud_bucket_id, opts)
      data
    end

    # Get mount status of Cloud bucket.
    # **API Key Scope**: cloud_buckets / mount_status
    # @param cloud_connector_id [String] Numeric ID or name of cloud connector.
    # @param cloud_bucket_id [String] Numeric ID or name of cloud bucket.
    # @param [Hash] opts the optional parameters
    # @return [Array<(MountStatus, Integer, Hash)>] MountStatus data, response status code and response headers
    def mount_status_cloud_bucket_by_cloud_connector_with_http_info(cloud_connector_id, cloud_bucket_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CloudBucketsApi.mount_status_cloud_bucket_by_cloud_connector ...'
      end
      # verify the required parameter 'cloud_connector_id' is set
      if @api_client.config.client_side_validation && cloud_connector_id.nil?
        fail ArgumentError, "Missing the required parameter 'cloud_connector_id' when calling CloudBucketsApi.mount_status_cloud_bucket_by_cloud_connector"
      end
      # verify the required parameter 'cloud_bucket_id' is set
      if @api_client.config.client_side_validation && cloud_bucket_id.nil?
        fail ArgumentError, "Missing the required parameter 'cloud_bucket_id' when calling CloudBucketsApi.mount_status_cloud_bucket_by_cloud_connector"
      end
      # resource path
      local_var_path = '/cloud_connectors/{cloud_connector_id}/cloud_buckets/{cloud_bucket_id}/mount'.sub('{' + 'cloud_connector_id' + '}', CGI.escape(cloud_connector_id.to_s)).sub('{' + 'cloud_bucket_id' + '}', CGI.escape(cloud_bucket_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'MountStatus' 

      # auth_names
      auth_names = opts[:auth_names] || ['BasicAuth', 'BearerAuth']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CloudBucketsApi#mount_status_cloud_bucket_by_cloud_connector\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get mount status of Cloud bucket.
    # **API Key Scope**: cloud_buckets / mount_status
    # @param pool_id [String] Numeric ID, or name of pool.
    # @param cloud_bucket_id [String] Numeric ID or name of cloud bucket.
    # @param [Hash] opts the optional parameters
    # @return [MountStatus]
    def mount_status_cloud_bucket_by_pool(pool_id, cloud_bucket_id, opts = {})
      data, _status_code, _headers = mount_status_cloud_bucket_by_pool_with_http_info(pool_id, cloud_bucket_id, opts)
      data
    end

    # Get mount status of Cloud bucket.
    # **API Key Scope**: cloud_buckets / mount_status
    # @param pool_id [String] Numeric ID, or name of pool.
    # @param cloud_bucket_id [String] Numeric ID or name of cloud bucket.
    # @param [Hash] opts the optional parameters
    # @return [Array<(MountStatus, Integer, Hash)>] MountStatus data, response status code and response headers
    def mount_status_cloud_bucket_by_pool_with_http_info(pool_id, cloud_bucket_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CloudBucketsApi.mount_status_cloud_bucket_by_pool ...'
      end
      # verify the required parameter 'pool_id' is set
      if @api_client.config.client_side_validation && pool_id.nil?
        fail ArgumentError, "Missing the required parameter 'pool_id' when calling CloudBucketsApi.mount_status_cloud_bucket_by_pool"
      end
      # verify the required parameter 'cloud_bucket_id' is set
      if @api_client.config.client_side_validation && cloud_bucket_id.nil?
        fail ArgumentError, "Missing the required parameter 'cloud_bucket_id' when calling CloudBucketsApi.mount_status_cloud_bucket_by_pool"
      end
      # resource path
      local_var_path = '/pools/{pool_id}/cloud_buckets/{cloud_bucket_id}/mount'.sub('{' + 'pool_id' + '}', CGI.escape(pool_id.to_s)).sub('{' + 'cloud_bucket_id' + '}', CGI.escape(cloud_bucket_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'MountStatus' 

      # auth_names
      auth_names = opts[:auth_names] || ['BasicAuth', 'BearerAuth']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CloudBucketsApi#mount_status_cloud_bucket_by_pool\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Displays a specific cloud bucket.
    # **API Key Scope**: cloud_buckets / show
    # @param cloud_bucket_id [String] Numeric ID or name of cloud bucket.
    # @param [Hash] opts the optional parameters
    # @return [CloudBucket]
    def show_cloud_bucket(cloud_bucket_id, opts = {})
      data, _status_code, _headers = show_cloud_bucket_with_http_info(cloud_bucket_id, opts)
      data
    end

    # Displays a specific cloud bucket.
    # **API Key Scope**: cloud_buckets / show
    # @param cloud_bucket_id [String] Numeric ID or name of cloud bucket.
    # @param [Hash] opts the optional parameters
    # @return [Array<(CloudBucket, Integer, Hash)>] CloudBucket data, response status code and response headers
    def show_cloud_bucket_with_http_info(cloud_bucket_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CloudBucketsApi.show_cloud_bucket ...'
      end
      # verify the required parameter 'cloud_bucket_id' is set
      if @api_client.config.client_side_validation && cloud_bucket_id.nil?
        fail ArgumentError, "Missing the required parameter 'cloud_bucket_id' when calling CloudBucketsApi.show_cloud_bucket"
      end
      # resource path
      local_var_path = '/cloud_buckets/{cloud_bucket_id}'.sub('{' + 'cloud_bucket_id' + '}', CGI.escape(cloud_bucket_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'CloudBucket' 

      # auth_names
      auth_names = opts[:auth_names] || ['BasicAuth', 'BearerAuth']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CloudBucketsApi#show_cloud_bucket\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Displays a specific cloud bucket.
    # **API Key Scope**: cloud_buckets / show
    # @param cloud_connector_id [String] Numeric ID or name of cloud connector.
    # @param cloud_bucket_id [String] Numeric ID or name of cloud bucket.
    # @param [Hash] opts the optional parameters
    # @return [CloudBucket]
    def show_cloud_bucket_by_cloud_connector(cloud_connector_id, cloud_bucket_id, opts = {})
      data, _status_code, _headers = show_cloud_bucket_by_cloud_connector_with_http_info(cloud_connector_id, cloud_bucket_id, opts)
      data
    end

    # Displays a specific cloud bucket.
    # **API Key Scope**: cloud_buckets / show
    # @param cloud_connector_id [String] Numeric ID or name of cloud connector.
    # @param cloud_bucket_id [String] Numeric ID or name of cloud bucket.
    # @param [Hash] opts the optional parameters
    # @return [Array<(CloudBucket, Integer, Hash)>] CloudBucket data, response status code and response headers
    def show_cloud_bucket_by_cloud_connector_with_http_info(cloud_connector_id, cloud_bucket_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CloudBucketsApi.show_cloud_bucket_by_cloud_connector ...'
      end
      # verify the required parameter 'cloud_connector_id' is set
      if @api_client.config.client_side_validation && cloud_connector_id.nil?
        fail ArgumentError, "Missing the required parameter 'cloud_connector_id' when calling CloudBucketsApi.show_cloud_bucket_by_cloud_connector"
      end
      # verify the required parameter 'cloud_bucket_id' is set
      if @api_client.config.client_side_validation && cloud_bucket_id.nil?
        fail ArgumentError, "Missing the required parameter 'cloud_bucket_id' when calling CloudBucketsApi.show_cloud_bucket_by_cloud_connector"
      end
      # resource path
      local_var_path = '/cloud_connectors/{cloud_connector_id}/cloud_buckets/{cloud_bucket_id}'.sub('{' + 'cloud_connector_id' + '}', CGI.escape(cloud_connector_id.to_s)).sub('{' + 'cloud_bucket_id' + '}', CGI.escape(cloud_bucket_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'CloudBucket' 

      # auth_names
      auth_names = opts[:auth_names] || ['BasicAuth', 'BearerAuth']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CloudBucketsApi#show_cloud_bucket_by_cloud_connector\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Displays a specific cloud bucket.
    # **API Key Scope**: cloud_buckets / show
    # @param pool_id [String] Numeric ID, or name of pool.
    # @param cloud_bucket_id [String] Numeric ID or name of cloud bucket.
    # @param [Hash] opts the optional parameters
    # @return [CloudBucket]
    def show_cloud_bucket_by_pool(pool_id, cloud_bucket_id, opts = {})
      data, _status_code, _headers = show_cloud_bucket_by_pool_with_http_info(pool_id, cloud_bucket_id, opts)
      data
    end

    # Displays a specific cloud bucket.
    # **API Key Scope**: cloud_buckets / show
    # @param pool_id [String] Numeric ID, or name of pool.
    # @param cloud_bucket_id [String] Numeric ID or name of cloud bucket.
    # @param [Hash] opts the optional parameters
    # @return [Array<(CloudBucket, Integer, Hash)>] CloudBucket data, response status code and response headers
    def show_cloud_bucket_by_pool_with_http_info(pool_id, cloud_bucket_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CloudBucketsApi.show_cloud_bucket_by_pool ...'
      end
      # verify the required parameter 'pool_id' is set
      if @api_client.config.client_side_validation && pool_id.nil?
        fail ArgumentError, "Missing the required parameter 'pool_id' when calling CloudBucketsApi.show_cloud_bucket_by_pool"
      end
      # verify the required parameter 'cloud_bucket_id' is set
      if @api_client.config.client_side_validation && cloud_bucket_id.nil?
        fail ArgumentError, "Missing the required parameter 'cloud_bucket_id' when calling CloudBucketsApi.show_cloud_bucket_by_pool"
      end
      # resource path
      local_var_path = '/pools/{pool_id}/cloud_buckets/{cloud_bucket_id}'.sub('{' + 'pool_id' + '}', CGI.escape(pool_id.to_s)).sub('{' + 'cloud_bucket_id' + '}', CGI.escape(cloud_bucket_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'CloudBucket' 

      # auth_names
      auth_names = opts[:auth_names] || ['BasicAuth', 'BearerAuth']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CloudBucketsApi#show_cloud_bucket_by_pool\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Synchronize internal cloud buckets with their remote equivalent.
    # **API Key Scope**: cloud_buckets / sync
    # @param cloud_connector_id [String] Numeric ID or name of cloud connector.
    # @param [Hash] opts the optional parameters
    # @return [ActiveJobStatus]
    def sync_cloud_buckets(cloud_connector_id, opts = {})
      data, _status_code, _headers = sync_cloud_buckets_with_http_info(cloud_connector_id, opts)
      data
    end

    # Synchronize internal cloud buckets with their remote equivalent.
    # **API Key Scope**: cloud_buckets / sync
    # @param cloud_connector_id [String] Numeric ID or name of cloud connector.
    # @param [Hash] opts the optional parameters
    # @return [Array<(ActiveJobStatus, Integer, Hash)>] ActiveJobStatus data, response status code and response headers
    def sync_cloud_buckets_with_http_info(cloud_connector_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CloudBucketsApi.sync_cloud_buckets ...'
      end
      # verify the required parameter 'cloud_connector_id' is set
      if @api_client.config.client_side_validation && cloud_connector_id.nil?
        fail ArgumentError, "Missing the required parameter 'cloud_connector_id' when calling CloudBucketsApi.sync_cloud_buckets"
      end
      # resource path
      local_var_path = '/cloud_connectors/{cloud_connector_id}/cloud_buckets/-/sync'.sub('{' + 'cloud_connector_id' + '}', CGI.escape(cloud_connector_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'queued', 'working', 'failed'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'ActiveJobStatus' 

      # auth_names
      auth_names = opts[:auth_names] || ['BasicAuth', 'BearerAuth']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CloudBucketsApi#sync_cloud_buckets\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Check result of cloud connector sync job.
    # **API Key Scope**: cloud_buckets / sync
    # @param cloud_connector_id [String] Numeric ID or name of cloud connector.
    # @param job_id [String] ID of active job
    # @param [Hash] opts the optional parameters
    # @return [CloudBucketSimpleCollection]
    def sync_result_cloud_buckets(cloud_connector_id, job_id, opts = {})
      data, _status_code, _headers = sync_result_cloud_buckets_with_http_info(cloud_connector_id, job_id, opts)
      data
    end

    # Check result of cloud connector sync job.
    # **API Key Scope**: cloud_buckets / sync
    # @param cloud_connector_id [String] Numeric ID or name of cloud connector.
    # @param job_id [String] ID of active job
    # @param [Hash] opts the optional parameters
    # @return [Array<(CloudBucketSimpleCollection, Integer, Hash)>] CloudBucketSimpleCollection data, response status code and response headers
    def sync_result_cloud_buckets_with_http_info(cloud_connector_id, job_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CloudBucketsApi.sync_result_cloud_buckets ...'
      end
      # verify the required parameter 'cloud_connector_id' is set
      if @api_client.config.client_side_validation && cloud_connector_id.nil?
        fail ArgumentError, "Missing the required parameter 'cloud_connector_id' when calling CloudBucketsApi.sync_result_cloud_buckets"
      end
      # verify the required parameter 'job_id' is set
      if @api_client.config.client_side_validation && job_id.nil?
        fail ArgumentError, "Missing the required parameter 'job_id' when calling CloudBucketsApi.sync_result_cloud_buckets"
      end
      # resource path
      local_var_path = '/cloud_connectors/{cloud_connector_id}/cloud_buckets/-/sync'.sub('{' + 'cloud_connector_id' + '}', CGI.escape(cloud_connector_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'job_id'] = job_id

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'queued', 'working', 'failed', ])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'CloudBucketSimpleCollection' 

      # auth_names
      auth_names = opts[:auth_names] || ['BasicAuth', 'BearerAuth']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CloudBucketsApi#sync_result_cloud_buckets\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Updates a specific cloud bucket.
    # **API Key Scope**: cloud_buckets / update
    # @param cloud_bucket_id [String] Numeric ID or name of cloud bucket.
    # @param cloud_bucket_body [CloudBucket] 
    # @param [Hash] opts the optional parameters
    # @return [CloudBucket]
    def update_cloud_bucket(cloud_bucket_id, cloud_bucket_body, opts = {})
      data, _status_code, _headers = update_cloud_bucket_with_http_info(cloud_bucket_id, cloud_bucket_body, opts)
      data
    end

    # Updates a specific cloud bucket.
    # **API Key Scope**: cloud_buckets / update
    # @param cloud_bucket_id [String] Numeric ID or name of cloud bucket.
    # @param cloud_bucket_body [CloudBucket] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(CloudBucket, Integer, Hash)>] CloudBucket data, response status code and response headers
    def update_cloud_bucket_with_http_info(cloud_bucket_id, cloud_bucket_body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CloudBucketsApi.update_cloud_bucket ...'
      end
      # verify the required parameter 'cloud_bucket_id' is set
      if @api_client.config.client_side_validation && cloud_bucket_id.nil?
        fail ArgumentError, "Missing the required parameter 'cloud_bucket_id' when calling CloudBucketsApi.update_cloud_bucket"
      end
      # verify the required parameter 'cloud_bucket_body' is set
      if @api_client.config.client_side_validation && cloud_bucket_body.nil?
        fail ArgumentError, "Missing the required parameter 'cloud_bucket_body' when calling CloudBucketsApi.update_cloud_bucket"
      end
      # resource path
      local_var_path = '/cloud_buckets/{cloud_bucket_id}'.sub('{' + 'cloud_bucket_id' + '}', CGI.escape(cloud_bucket_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(cloud_bucket_body) 

      # return_type
      return_type = opts[:return_type] || 'CloudBucket' 

      # auth_names
      auth_names = opts[:auth_names] || ['BasicAuth', 'BearerAuth']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CloudBucketsApi#update_cloud_bucket\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Updates a specific cloud bucket.
    # **API Key Scope**: cloud_buckets / update
    # @param cloud_connector_id [String] Numeric ID or name of cloud connector.
    # @param cloud_bucket_id [String] Numeric ID or name of cloud bucket.
    # @param cloud_bucket_body [CloudBucket] 
    # @param [Hash] opts the optional parameters
    # @return [CloudBucket]
    def update_cloud_bucket_by_cloud_connector(cloud_connector_id, cloud_bucket_id, cloud_bucket_body, opts = {})
      data, _status_code, _headers = update_cloud_bucket_by_cloud_connector_with_http_info(cloud_connector_id, cloud_bucket_id, cloud_bucket_body, opts)
      data
    end

    # Updates a specific cloud bucket.
    # **API Key Scope**: cloud_buckets / update
    # @param cloud_connector_id [String] Numeric ID or name of cloud connector.
    # @param cloud_bucket_id [String] Numeric ID or name of cloud bucket.
    # @param cloud_bucket_body [CloudBucket] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(CloudBucket, Integer, Hash)>] CloudBucket data, response status code and response headers
    def update_cloud_bucket_by_cloud_connector_with_http_info(cloud_connector_id, cloud_bucket_id, cloud_bucket_body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CloudBucketsApi.update_cloud_bucket_by_cloud_connector ...'
      end
      # verify the required parameter 'cloud_connector_id' is set
      if @api_client.config.client_side_validation && cloud_connector_id.nil?
        fail ArgumentError, "Missing the required parameter 'cloud_connector_id' when calling CloudBucketsApi.update_cloud_bucket_by_cloud_connector"
      end
      # verify the required parameter 'cloud_bucket_id' is set
      if @api_client.config.client_side_validation && cloud_bucket_id.nil?
        fail ArgumentError, "Missing the required parameter 'cloud_bucket_id' when calling CloudBucketsApi.update_cloud_bucket_by_cloud_connector"
      end
      # verify the required parameter 'cloud_bucket_body' is set
      if @api_client.config.client_side_validation && cloud_bucket_body.nil?
        fail ArgumentError, "Missing the required parameter 'cloud_bucket_body' when calling CloudBucketsApi.update_cloud_bucket_by_cloud_connector"
      end
      # resource path
      local_var_path = '/cloud_connectors/{cloud_connector_id}/cloud_buckets/{cloud_bucket_id}'.sub('{' + 'cloud_connector_id' + '}', CGI.escape(cloud_connector_id.to_s)).sub('{' + 'cloud_bucket_id' + '}', CGI.escape(cloud_bucket_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(cloud_bucket_body) 

      # return_type
      return_type = opts[:return_type] || 'CloudBucket' 

      # auth_names
      auth_names = opts[:auth_names] || ['BasicAuth', 'BearerAuth']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CloudBucketsApi#update_cloud_bucket_by_cloud_connector\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Updates a specific cloud bucket.
    # **API Key Scope**: cloud_buckets / update
    # @param pool_id [String] Numeric ID, or name of pool.
    # @param cloud_bucket_id [String] Numeric ID or name of cloud bucket.
    # @param cloud_bucket_body [CloudBucket] 
    # @param [Hash] opts the optional parameters
    # @return [CloudBucket]
    def update_cloud_bucket_by_pool(pool_id, cloud_bucket_id, cloud_bucket_body, opts = {})
      data, _status_code, _headers = update_cloud_bucket_by_pool_with_http_info(pool_id, cloud_bucket_id, cloud_bucket_body, opts)
      data
    end

    # Updates a specific cloud bucket.
    # **API Key Scope**: cloud_buckets / update
    # @param pool_id [String] Numeric ID, or name of pool.
    # @param cloud_bucket_id [String] Numeric ID or name of cloud bucket.
    # @param cloud_bucket_body [CloudBucket] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(CloudBucket, Integer, Hash)>] CloudBucket data, response status code and response headers
    def update_cloud_bucket_by_pool_with_http_info(pool_id, cloud_bucket_id, cloud_bucket_body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CloudBucketsApi.update_cloud_bucket_by_pool ...'
      end
      # verify the required parameter 'pool_id' is set
      if @api_client.config.client_side_validation && pool_id.nil?
        fail ArgumentError, "Missing the required parameter 'pool_id' when calling CloudBucketsApi.update_cloud_bucket_by_pool"
      end
      # verify the required parameter 'cloud_bucket_id' is set
      if @api_client.config.client_side_validation && cloud_bucket_id.nil?
        fail ArgumentError, "Missing the required parameter 'cloud_bucket_id' when calling CloudBucketsApi.update_cloud_bucket_by_pool"
      end
      # verify the required parameter 'cloud_bucket_body' is set
      if @api_client.config.client_side_validation && cloud_bucket_body.nil?
        fail ArgumentError, "Missing the required parameter 'cloud_bucket_body' when calling CloudBucketsApi.update_cloud_bucket_by_pool"
      end
      # resource path
      local_var_path = '/pools/{pool_id}/cloud_buckets/{cloud_bucket_id}'.sub('{' + 'pool_id' + '}', CGI.escape(pool_id.to_s)).sub('{' + 'cloud_bucket_id' + '}', CGI.escape(cloud_bucket_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(cloud_bucket_body) 

      # return_type
      return_type = opts[:return_type] || 'CloudBucket' 

      # auth_names
      auth_names = opts[:auth_names] || ['BasicAuth', 'BearerAuth']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CloudBucketsApi#update_cloud_bucket_by_pool\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
