=begin
#Nodeum API

## About  This document describes the Nodeum API version 2:  If you are looking for any information about the product itself, reach the product website https://www.nodeum.io. You can also contact us at this email address : info@nodeum.io  # Filter parameters When browsing a list of items, multiple filter parameters may be applied. Some operators can be added to the value as a prefix:  - `=` value is equal. Default operator, may be omitted  - `!=` value is different  - `>` greater than  - `>=` greater than or equal  - `<` lower than  - `>=` lower than or equal  - `><` included in list, items should be separated by `|`  - `!><` not included in list, items should be separated by `|`  - `~` pattern matching, may include `%` (any characters) and `_` (one character)  - `!~` pattern not matching, may include `%` (any characters) and `_` (one character)  

The version of the OpenAPI document: 2.1.0

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 4.3.0

=end

require 'cgi'

module Nodeum
  class TapesApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # List all tape statistics.
    # **API Key Scope**: tape_stats / index
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :limit The number of items to display for pagination.
    # @option opts [Integer] :offset The number of items to skip for pagination.
    # @return [TapeStatCollection]
    def index_tape_stats(opts = {})
      data, _status_code, _headers = index_tape_stats_with_http_info(opts)
      data
    end

    # List all tape statistics.
    # **API Key Scope**: tape_stats / index
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :limit The number of items to display for pagination.
    # @option opts [Integer] :offset The number of items to skip for pagination.
    # @return [Array<(TapeStatCollection, Integer, Hash)>] TapeStatCollection data, response status code and response headers
    def index_tape_stats_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TapesApi.index_tape_stats ...'
      end
      # resource path
      local_var_path = '/tape_stats'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'TapeStatCollection' 

      # auth_names
      auth_names = opts[:auth_names] || ['BasicAuth', 'BearerAuth']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TapesApi#index_tape_stats\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Lists all tapes.
    # **API Key Scope**: tapes / index
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :limit The number of items to display for pagination.
    # @option opts [Integer] :offset The number of items to skip for pagination.
    # @option opts [Array<String>] :sort_by Sort results by attribute.  Can sort on multiple attributes, separated by &#x60;|&#x60;. Order direction can be suffixing the attribute by either &#x60;:asc&#x60; (default) or &#x60;:desc&#x60;.
    # @option opts [String] :id Filter on id
    # @option opts [String] :tape_library_id Filter on tape library id
    # @option opts [String] :pool_id Filter on a pool id
    # @option opts [String] :barcode Filter on barcode
    # @option opts [String] :location Filter on location
    # @option opts [String] :type Filter on type
    # @option opts [String] :locked Filter on locked
    # @option opts [String] :scratch Filter on scratch
    # @option opts [String] :cleaning Filter on cleaning
    # @option opts [String] :write_protect Filter on write protect
    # @option opts [String] :mounted Filter on mounted
    # @option opts [String] :ejected Filter on ejected
    # @option opts [String] :known Filter on known
    # @option opts [String] :mount_count Filter on mount count
    # @option opts [String] :date_in Filter on date in
    # @option opts [String] :date_move Filter on date move
    # @option opts [String] :free Filter on free
    # @option opts [String] :max Filter on max
    # @option opts [String] :last_size_update Filter on last size update
    # @option opts [String] :last_maintenance Filter on last maintenance
    # @option opts [String] :last_repack Filter on last repack
    # @option opts [String] :repack_status Filter on repack status
    # @option opts [String] :hash Filter on hash
    # @option opts [String] :force_import_type Filter on force import type
    # @option opts [String] :need_to_check Filter on need to check
    # @return [TapeCollection]
    def index_tapes(opts = {})
      data, _status_code, _headers = index_tapes_with_http_info(opts)
      data
    end

    # Lists all tapes.
    # **API Key Scope**: tapes / index
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :limit The number of items to display for pagination.
    # @option opts [Integer] :offset The number of items to skip for pagination.
    # @option opts [Array<String>] :sort_by Sort results by attribute.  Can sort on multiple attributes, separated by &#x60;|&#x60;. Order direction can be suffixing the attribute by either &#x60;:asc&#x60; (default) or &#x60;:desc&#x60;.
    # @option opts [String] :id Filter on id
    # @option opts [String] :tape_library_id Filter on tape library id
    # @option opts [String] :pool_id Filter on a pool id
    # @option opts [String] :barcode Filter on barcode
    # @option opts [String] :location Filter on location
    # @option opts [String] :type Filter on type
    # @option opts [String] :locked Filter on locked
    # @option opts [String] :scratch Filter on scratch
    # @option opts [String] :cleaning Filter on cleaning
    # @option opts [String] :write_protect Filter on write protect
    # @option opts [String] :mounted Filter on mounted
    # @option opts [String] :ejected Filter on ejected
    # @option opts [String] :known Filter on known
    # @option opts [String] :mount_count Filter on mount count
    # @option opts [String] :date_in Filter on date in
    # @option opts [String] :date_move Filter on date move
    # @option opts [String] :free Filter on free
    # @option opts [String] :max Filter on max
    # @option opts [String] :last_size_update Filter on last size update
    # @option opts [String] :last_maintenance Filter on last maintenance
    # @option opts [String] :last_repack Filter on last repack
    # @option opts [String] :repack_status Filter on repack status
    # @option opts [String] :hash Filter on hash
    # @option opts [String] :force_import_type Filter on force import type
    # @option opts [String] :need_to_check Filter on need to check
    # @return [Array<(TapeCollection, Integer, Hash)>] TapeCollection data, response status code and response headers
    def index_tapes_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TapesApi.index_tapes ...'
      end
      # resource path
      local_var_path = '/tapes'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?
      query_params[:'sort_by'] = @api_client.build_collection_param(opts[:'sort_by'], :pipe) if !opts[:'sort_by'].nil?
      query_params[:'id'] = opts[:'id'] if !opts[:'id'].nil?
      query_params[:'tape_library_id'] = opts[:'tape_library_id'] if !opts[:'tape_library_id'].nil?
      query_params[:'pool_id'] = opts[:'pool_id'] if !opts[:'pool_id'].nil?
      query_params[:'barcode'] = opts[:'barcode'] if !opts[:'barcode'].nil?
      query_params[:'location'] = opts[:'location'] if !opts[:'location'].nil?
      query_params[:'type'] = opts[:'type'] if !opts[:'type'].nil?
      query_params[:'locked'] = opts[:'locked'] if !opts[:'locked'].nil?
      query_params[:'scratch'] = opts[:'scratch'] if !opts[:'scratch'].nil?
      query_params[:'cleaning'] = opts[:'cleaning'] if !opts[:'cleaning'].nil?
      query_params[:'write_protect'] = opts[:'write_protect'] if !opts[:'write_protect'].nil?
      query_params[:'mounted'] = opts[:'mounted'] if !opts[:'mounted'].nil?
      query_params[:'ejected'] = opts[:'ejected'] if !opts[:'ejected'].nil?
      query_params[:'known'] = opts[:'known'] if !opts[:'known'].nil?
      query_params[:'mount_count'] = opts[:'mount_count'] if !opts[:'mount_count'].nil?
      query_params[:'date_in'] = opts[:'date_in'] if !opts[:'date_in'].nil?
      query_params[:'date_move'] = opts[:'date_move'] if !opts[:'date_move'].nil?
      query_params[:'free'] = opts[:'free'] if !opts[:'free'].nil?
      query_params[:'max'] = opts[:'max'] if !opts[:'max'].nil?
      query_params[:'last_size_update'] = opts[:'last_size_update'] if !opts[:'last_size_update'].nil?
      query_params[:'last_maintenance'] = opts[:'last_maintenance'] if !opts[:'last_maintenance'].nil?
      query_params[:'last_repack'] = opts[:'last_repack'] if !opts[:'last_repack'].nil?
      query_params[:'repack_status'] = opts[:'repack_status'] if !opts[:'repack_status'].nil?
      query_params[:'hash'] = opts[:'hash'] if !opts[:'hash'].nil?
      query_params[:'force_import_type'] = opts[:'force_import_type'] if !opts[:'force_import_type'].nil?
      query_params[:'need_to_check'] = opts[:'need_to_check'] if !opts[:'need_to_check'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'TapeCollection' 

      # auth_names
      auth_names = opts[:auth_names] || ['BasicAuth', 'BearerAuth']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TapesApi#index_tapes\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Lists all tapes.
    # **API Key Scope**: tapes / index
    # @param pool_id [String] Numeric ID, or name of pool.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :limit The number of items to display for pagination.
    # @option opts [Integer] :offset The number of items to skip for pagination.
    # @option opts [Array<String>] :sort_by Sort results by attribute.  Can sort on multiple attributes, separated by &#x60;|&#x60;. Order direction can be suffixing the attribute by either &#x60;:asc&#x60; (default) or &#x60;:desc&#x60;.
    # @option opts [String] :id Filter on id
    # @option opts [String] :tape_library_id Filter on tape library id
    # @option opts [String] :barcode Filter on barcode
    # @option opts [String] :location Filter on location
    # @option opts [String] :type Filter on type
    # @option opts [String] :locked Filter on locked
    # @option opts [String] :scratch Filter on scratch
    # @option opts [String] :cleaning Filter on cleaning
    # @option opts [String] :write_protect Filter on write protect
    # @option opts [String] :mounted Filter on mounted
    # @option opts [String] :ejected Filter on ejected
    # @option opts [String] :known Filter on known
    # @option opts [String] :mount_count Filter on mount count
    # @option opts [String] :date_in Filter on date in
    # @option opts [String] :date_move Filter on date move
    # @option opts [String] :free Filter on free
    # @option opts [String] :max Filter on max
    # @option opts [String] :last_size_update Filter on last size update
    # @option opts [String] :last_maintenance Filter on last maintenance
    # @option opts [String] :last_repack Filter on last repack
    # @option opts [String] :repack_status Filter on repack status
    # @option opts [String] :hash Filter on hash
    # @option opts [String] :force_import_type Filter on force import type
    # @option opts [String] :need_to_check Filter on need to check
    # @return [TapeCollection]
    def index_tapes_by_pool(pool_id, opts = {})
      data, _status_code, _headers = index_tapes_by_pool_with_http_info(pool_id, opts)
      data
    end

    # Lists all tapes.
    # **API Key Scope**: tapes / index
    # @param pool_id [String] Numeric ID, or name of pool.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :limit The number of items to display for pagination.
    # @option opts [Integer] :offset The number of items to skip for pagination.
    # @option opts [Array<String>] :sort_by Sort results by attribute.  Can sort on multiple attributes, separated by &#x60;|&#x60;. Order direction can be suffixing the attribute by either &#x60;:asc&#x60; (default) or &#x60;:desc&#x60;.
    # @option opts [String] :id Filter on id
    # @option opts [String] :tape_library_id Filter on tape library id
    # @option opts [String] :barcode Filter on barcode
    # @option opts [String] :location Filter on location
    # @option opts [String] :type Filter on type
    # @option opts [String] :locked Filter on locked
    # @option opts [String] :scratch Filter on scratch
    # @option opts [String] :cleaning Filter on cleaning
    # @option opts [String] :write_protect Filter on write protect
    # @option opts [String] :mounted Filter on mounted
    # @option opts [String] :ejected Filter on ejected
    # @option opts [String] :known Filter on known
    # @option opts [String] :mount_count Filter on mount count
    # @option opts [String] :date_in Filter on date in
    # @option opts [String] :date_move Filter on date move
    # @option opts [String] :free Filter on free
    # @option opts [String] :max Filter on max
    # @option opts [String] :last_size_update Filter on last size update
    # @option opts [String] :last_maintenance Filter on last maintenance
    # @option opts [String] :last_repack Filter on last repack
    # @option opts [String] :repack_status Filter on repack status
    # @option opts [String] :hash Filter on hash
    # @option opts [String] :force_import_type Filter on force import type
    # @option opts [String] :need_to_check Filter on need to check
    # @return [Array<(TapeCollection, Integer, Hash)>] TapeCollection data, response status code and response headers
    def index_tapes_by_pool_with_http_info(pool_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TapesApi.index_tapes_by_pool ...'
      end
      # verify the required parameter 'pool_id' is set
      if @api_client.config.client_side_validation && pool_id.nil?
        fail ArgumentError, "Missing the required parameter 'pool_id' when calling TapesApi.index_tapes_by_pool"
      end
      # resource path
      local_var_path = '/pools/{pool_id}/tapes'.sub('{' + 'pool_id' + '}', CGI.escape(pool_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?
      query_params[:'sort_by'] = @api_client.build_collection_param(opts[:'sort_by'], :pipe) if !opts[:'sort_by'].nil?
      query_params[:'id'] = opts[:'id'] if !opts[:'id'].nil?
      query_params[:'tape_library_id'] = opts[:'tape_library_id'] if !opts[:'tape_library_id'].nil?
      query_params[:'barcode'] = opts[:'barcode'] if !opts[:'barcode'].nil?
      query_params[:'location'] = opts[:'location'] if !opts[:'location'].nil?
      query_params[:'type'] = opts[:'type'] if !opts[:'type'].nil?
      query_params[:'locked'] = opts[:'locked'] if !opts[:'locked'].nil?
      query_params[:'scratch'] = opts[:'scratch'] if !opts[:'scratch'].nil?
      query_params[:'cleaning'] = opts[:'cleaning'] if !opts[:'cleaning'].nil?
      query_params[:'write_protect'] = opts[:'write_protect'] if !opts[:'write_protect'].nil?
      query_params[:'mounted'] = opts[:'mounted'] if !opts[:'mounted'].nil?
      query_params[:'ejected'] = opts[:'ejected'] if !opts[:'ejected'].nil?
      query_params[:'known'] = opts[:'known'] if !opts[:'known'].nil?
      query_params[:'mount_count'] = opts[:'mount_count'] if !opts[:'mount_count'].nil?
      query_params[:'date_in'] = opts[:'date_in'] if !opts[:'date_in'].nil?
      query_params[:'date_move'] = opts[:'date_move'] if !opts[:'date_move'].nil?
      query_params[:'free'] = opts[:'free'] if !opts[:'free'].nil?
      query_params[:'max'] = opts[:'max'] if !opts[:'max'].nil?
      query_params[:'last_size_update'] = opts[:'last_size_update'] if !opts[:'last_size_update'].nil?
      query_params[:'last_maintenance'] = opts[:'last_maintenance'] if !opts[:'last_maintenance'].nil?
      query_params[:'last_repack'] = opts[:'last_repack'] if !opts[:'last_repack'].nil?
      query_params[:'repack_status'] = opts[:'repack_status'] if !opts[:'repack_status'].nil?
      query_params[:'hash'] = opts[:'hash'] if !opts[:'hash'].nil?
      query_params[:'force_import_type'] = opts[:'force_import_type'] if !opts[:'force_import_type'].nil?
      query_params[:'need_to_check'] = opts[:'need_to_check'] if !opts[:'need_to_check'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'TapeCollection' 

      # auth_names
      auth_names = opts[:auth_names] || ['BasicAuth', 'BearerAuth']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TapesApi#index_tapes_by_pool\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Lists all tapes.
    # **API Key Scope**: tapes / index
    # @param tape_library_id [String] Numeric ID, serial, or name of tape library.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :limit The number of items to display for pagination.
    # @option opts [Integer] :offset The number of items to skip for pagination.
    # @option opts [Array<String>] :sort_by Sort results by attribute.  Can sort on multiple attributes, separated by &#x60;|&#x60;. Order direction can be suffixing the attribute by either &#x60;:asc&#x60; (default) or &#x60;:desc&#x60;.
    # @option opts [String] :id Filter on id
    # @option opts [String] :pool_id Filter on a pool id
    # @option opts [String] :barcode Filter on barcode
    # @option opts [String] :location Filter on location
    # @option opts [String] :type Filter on type
    # @option opts [String] :locked Filter on locked
    # @option opts [String] :scratch Filter on scratch
    # @option opts [String] :cleaning Filter on cleaning
    # @option opts [String] :write_protect Filter on write protect
    # @option opts [String] :mounted Filter on mounted
    # @option opts [String] :ejected Filter on ejected
    # @option opts [String] :known Filter on known
    # @option opts [String] :mount_count Filter on mount count
    # @option opts [String] :date_in Filter on date in
    # @option opts [String] :date_move Filter on date move
    # @option opts [String] :free Filter on free
    # @option opts [String] :max Filter on max
    # @option opts [String] :last_size_update Filter on last size update
    # @option opts [String] :last_maintenance Filter on last maintenance
    # @option opts [String] :last_repack Filter on last repack
    # @option opts [String] :repack_status Filter on repack status
    # @option opts [String] :hash Filter on hash
    # @option opts [String] :force_import_type Filter on force import type
    # @option opts [String] :need_to_check Filter on need to check
    # @return [TapeCollection]
    def index_tapes_by_tape_library(tape_library_id, opts = {})
      data, _status_code, _headers = index_tapes_by_tape_library_with_http_info(tape_library_id, opts)
      data
    end

    # Lists all tapes.
    # **API Key Scope**: tapes / index
    # @param tape_library_id [String] Numeric ID, serial, or name of tape library.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :limit The number of items to display for pagination.
    # @option opts [Integer] :offset The number of items to skip for pagination.
    # @option opts [Array<String>] :sort_by Sort results by attribute.  Can sort on multiple attributes, separated by &#x60;|&#x60;. Order direction can be suffixing the attribute by either &#x60;:asc&#x60; (default) or &#x60;:desc&#x60;.
    # @option opts [String] :id Filter on id
    # @option opts [String] :pool_id Filter on a pool id
    # @option opts [String] :barcode Filter on barcode
    # @option opts [String] :location Filter on location
    # @option opts [String] :type Filter on type
    # @option opts [String] :locked Filter on locked
    # @option opts [String] :scratch Filter on scratch
    # @option opts [String] :cleaning Filter on cleaning
    # @option opts [String] :write_protect Filter on write protect
    # @option opts [String] :mounted Filter on mounted
    # @option opts [String] :ejected Filter on ejected
    # @option opts [String] :known Filter on known
    # @option opts [String] :mount_count Filter on mount count
    # @option opts [String] :date_in Filter on date in
    # @option opts [String] :date_move Filter on date move
    # @option opts [String] :free Filter on free
    # @option opts [String] :max Filter on max
    # @option opts [String] :last_size_update Filter on last size update
    # @option opts [String] :last_maintenance Filter on last maintenance
    # @option opts [String] :last_repack Filter on last repack
    # @option opts [String] :repack_status Filter on repack status
    # @option opts [String] :hash Filter on hash
    # @option opts [String] :force_import_type Filter on force import type
    # @option opts [String] :need_to_check Filter on need to check
    # @return [Array<(TapeCollection, Integer, Hash)>] TapeCollection data, response status code and response headers
    def index_tapes_by_tape_library_with_http_info(tape_library_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TapesApi.index_tapes_by_tape_library ...'
      end
      # verify the required parameter 'tape_library_id' is set
      if @api_client.config.client_side_validation && tape_library_id.nil?
        fail ArgumentError, "Missing the required parameter 'tape_library_id' when calling TapesApi.index_tapes_by_tape_library"
      end
      # resource path
      local_var_path = '/tape_libraries/{tape_library_id}/tapes'.sub('{' + 'tape_library_id' + '}', CGI.escape(tape_library_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?
      query_params[:'sort_by'] = @api_client.build_collection_param(opts[:'sort_by'], :pipe) if !opts[:'sort_by'].nil?
      query_params[:'id'] = opts[:'id'] if !opts[:'id'].nil?
      query_params[:'pool_id'] = opts[:'pool_id'] if !opts[:'pool_id'].nil?
      query_params[:'barcode'] = opts[:'barcode'] if !opts[:'barcode'].nil?
      query_params[:'location'] = opts[:'location'] if !opts[:'location'].nil?
      query_params[:'type'] = opts[:'type'] if !opts[:'type'].nil?
      query_params[:'locked'] = opts[:'locked'] if !opts[:'locked'].nil?
      query_params[:'scratch'] = opts[:'scratch'] if !opts[:'scratch'].nil?
      query_params[:'cleaning'] = opts[:'cleaning'] if !opts[:'cleaning'].nil?
      query_params[:'write_protect'] = opts[:'write_protect'] if !opts[:'write_protect'].nil?
      query_params[:'mounted'] = opts[:'mounted'] if !opts[:'mounted'].nil?
      query_params[:'ejected'] = opts[:'ejected'] if !opts[:'ejected'].nil?
      query_params[:'known'] = opts[:'known'] if !opts[:'known'].nil?
      query_params[:'mount_count'] = opts[:'mount_count'] if !opts[:'mount_count'].nil?
      query_params[:'date_in'] = opts[:'date_in'] if !opts[:'date_in'].nil?
      query_params[:'date_move'] = opts[:'date_move'] if !opts[:'date_move'].nil?
      query_params[:'free'] = opts[:'free'] if !opts[:'free'].nil?
      query_params[:'max'] = opts[:'max'] if !opts[:'max'].nil?
      query_params[:'last_size_update'] = opts[:'last_size_update'] if !opts[:'last_size_update'].nil?
      query_params[:'last_maintenance'] = opts[:'last_maintenance'] if !opts[:'last_maintenance'].nil?
      query_params[:'last_repack'] = opts[:'last_repack'] if !opts[:'last_repack'].nil?
      query_params[:'repack_status'] = opts[:'repack_status'] if !opts[:'repack_status'].nil?
      query_params[:'hash'] = opts[:'hash'] if !opts[:'hash'].nil?
      query_params[:'force_import_type'] = opts[:'force_import_type'] if !opts[:'force_import_type'].nil?
      query_params[:'need_to_check'] = opts[:'need_to_check'] if !opts[:'need_to_check'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'TapeCollection' 

      # auth_names
      auth_names = opts[:auth_names] || ['BasicAuth', 'BearerAuth']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TapesApi#index_tapes_by_tape_library\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get mount status of Tape.
    # **API Key Scope**: tapes / mount_status
    # @param tape_id [String] Numeric ID, or barcode of tape.
    # @param [Hash] opts the optional parameters
    # @return [MountStatus]
    def mount_status_tape(tape_id, opts = {})
      data, _status_code, _headers = mount_status_tape_with_http_info(tape_id, opts)
      data
    end

    # Get mount status of Tape.
    # **API Key Scope**: tapes / mount_status
    # @param tape_id [String] Numeric ID, or barcode of tape.
    # @param [Hash] opts the optional parameters
    # @return [Array<(MountStatus, Integer, Hash)>] MountStatus data, response status code and response headers
    def mount_status_tape_with_http_info(tape_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TapesApi.mount_status_tape ...'
      end
      # verify the required parameter 'tape_id' is set
      if @api_client.config.client_side_validation && tape_id.nil?
        fail ArgumentError, "Missing the required parameter 'tape_id' when calling TapesApi.mount_status_tape"
      end
      # resource path
      local_var_path = '/tapes/{tape_id}/mount'.sub('{' + 'tape_id' + '}', CGI.escape(tape_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'MountStatus' 

      # auth_names
      auth_names = opts[:auth_names] || ['BasicAuth', 'BearerAuth']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TapesApi#mount_status_tape\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get mount status of Tape.
    # **API Key Scope**: tapes / mount_status
    # @param pool_id [String] Numeric ID, or name of pool.
    # @param tape_id [String] Numeric ID, or barcode of tape.
    # @param [Hash] opts the optional parameters
    # @return [MountStatus]
    def mount_status_tape_by_pool(pool_id, tape_id, opts = {})
      data, _status_code, _headers = mount_status_tape_by_pool_with_http_info(pool_id, tape_id, opts)
      data
    end

    # Get mount status of Tape.
    # **API Key Scope**: tapes / mount_status
    # @param pool_id [String] Numeric ID, or name of pool.
    # @param tape_id [String] Numeric ID, or barcode of tape.
    # @param [Hash] opts the optional parameters
    # @return [Array<(MountStatus, Integer, Hash)>] MountStatus data, response status code and response headers
    def mount_status_tape_by_pool_with_http_info(pool_id, tape_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TapesApi.mount_status_tape_by_pool ...'
      end
      # verify the required parameter 'pool_id' is set
      if @api_client.config.client_side_validation && pool_id.nil?
        fail ArgumentError, "Missing the required parameter 'pool_id' when calling TapesApi.mount_status_tape_by_pool"
      end
      # verify the required parameter 'tape_id' is set
      if @api_client.config.client_side_validation && tape_id.nil?
        fail ArgumentError, "Missing the required parameter 'tape_id' when calling TapesApi.mount_status_tape_by_pool"
      end
      # resource path
      local_var_path = '/pools/{pool_id}/tapes/{tape_id}/mount'.sub('{' + 'pool_id' + '}', CGI.escape(pool_id.to_s)).sub('{' + 'tape_id' + '}', CGI.escape(tape_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'MountStatus' 

      # auth_names
      auth_names = opts[:auth_names] || ['BasicAuth', 'BearerAuth']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TapesApi#mount_status_tape_by_pool\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get mount status of Tape.
    # **API Key Scope**: tapes / mount_status
    # @param tape_library_id [String] Numeric ID, serial, or name of tape library.
    # @param tape_id [String] Numeric ID, or barcode of tape.
    # @param [Hash] opts the optional parameters
    # @return [MountStatus]
    def mount_status_tape_by_tape_library(tape_library_id, tape_id, opts = {})
      data, _status_code, _headers = mount_status_tape_by_tape_library_with_http_info(tape_library_id, tape_id, opts)
      data
    end

    # Get mount status of Tape.
    # **API Key Scope**: tapes / mount_status
    # @param tape_library_id [String] Numeric ID, serial, or name of tape library.
    # @param tape_id [String] Numeric ID, or barcode of tape.
    # @param [Hash] opts the optional parameters
    # @return [Array<(MountStatus, Integer, Hash)>] MountStatus data, response status code and response headers
    def mount_status_tape_by_tape_library_with_http_info(tape_library_id, tape_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TapesApi.mount_status_tape_by_tape_library ...'
      end
      # verify the required parameter 'tape_library_id' is set
      if @api_client.config.client_side_validation && tape_library_id.nil?
        fail ArgumentError, "Missing the required parameter 'tape_library_id' when calling TapesApi.mount_status_tape_by_tape_library"
      end
      # verify the required parameter 'tape_id' is set
      if @api_client.config.client_side_validation && tape_id.nil?
        fail ArgumentError, "Missing the required parameter 'tape_id' when calling TapesApi.mount_status_tape_by_tape_library"
      end
      # resource path
      local_var_path = '/tape_libraries/{tape_library_id}/tapes/{tape_id}/mount'.sub('{' + 'tape_library_id' + '}', CGI.escape(tape_library_id.to_s)).sub('{' + 'tape_id' + '}', CGI.escape(tape_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'MountStatus' 

      # auth_names
      auth_names = opts[:auth_names] || ['BasicAuth', 'BearerAuth']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TapesApi#mount_status_tape_by_tape_library\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Displays a specific tape.
    # **API Key Scope**: tapes / show
    # @param tape_id [String] Numeric ID, or barcode of tape.
    # @param [Hash] opts the optional parameters
    # @return [Tape]
    def show_tape(tape_id, opts = {})
      data, _status_code, _headers = show_tape_with_http_info(tape_id, opts)
      data
    end

    # Displays a specific tape.
    # **API Key Scope**: tapes / show
    # @param tape_id [String] Numeric ID, or barcode of tape.
    # @param [Hash] opts the optional parameters
    # @return [Array<(Tape, Integer, Hash)>] Tape data, response status code and response headers
    def show_tape_with_http_info(tape_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TapesApi.show_tape ...'
      end
      # verify the required parameter 'tape_id' is set
      if @api_client.config.client_side_validation && tape_id.nil?
        fail ArgumentError, "Missing the required parameter 'tape_id' when calling TapesApi.show_tape"
      end
      # resource path
      local_var_path = '/tapes/{tape_id}'.sub('{' + 'tape_id' + '}', CGI.escape(tape_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'Tape' 

      # auth_names
      auth_names = opts[:auth_names] || ['BasicAuth', 'BearerAuth']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TapesApi#show_tape\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Displays a specific tape.
    # **API Key Scope**: tapes / show
    # @param pool_id [String] Numeric ID, or name of pool.
    # @param tape_id [String] Numeric ID, or barcode of tape.
    # @param [Hash] opts the optional parameters
    # @return [Tape]
    def show_tape_by_pool(pool_id, tape_id, opts = {})
      data, _status_code, _headers = show_tape_by_pool_with_http_info(pool_id, tape_id, opts)
      data
    end

    # Displays a specific tape.
    # **API Key Scope**: tapes / show
    # @param pool_id [String] Numeric ID, or name of pool.
    # @param tape_id [String] Numeric ID, or barcode of tape.
    # @param [Hash] opts the optional parameters
    # @return [Array<(Tape, Integer, Hash)>] Tape data, response status code and response headers
    def show_tape_by_pool_with_http_info(pool_id, tape_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TapesApi.show_tape_by_pool ...'
      end
      # verify the required parameter 'pool_id' is set
      if @api_client.config.client_side_validation && pool_id.nil?
        fail ArgumentError, "Missing the required parameter 'pool_id' when calling TapesApi.show_tape_by_pool"
      end
      # verify the required parameter 'tape_id' is set
      if @api_client.config.client_side_validation && tape_id.nil?
        fail ArgumentError, "Missing the required parameter 'tape_id' when calling TapesApi.show_tape_by_pool"
      end
      # resource path
      local_var_path = '/pools/{pool_id}/tapes/{tape_id}'.sub('{' + 'pool_id' + '}', CGI.escape(pool_id.to_s)).sub('{' + 'tape_id' + '}', CGI.escape(tape_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'Tape' 

      # auth_names
      auth_names = opts[:auth_names] || ['BasicAuth', 'BearerAuth']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TapesApi#show_tape_by_pool\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Displays a specific tape.
    # **API Key Scope**: tapes / show
    # @param tape_library_id [String] Numeric ID, serial, or name of tape library.
    # @param tape_id [String] Numeric ID, or barcode of tape.
    # @param [Hash] opts the optional parameters
    # @return [Tape]
    def show_tape_by_tape_library(tape_library_id, tape_id, opts = {})
      data, _status_code, _headers = show_tape_by_tape_library_with_http_info(tape_library_id, tape_id, opts)
      data
    end

    # Displays a specific tape.
    # **API Key Scope**: tapes / show
    # @param tape_library_id [String] Numeric ID, serial, or name of tape library.
    # @param tape_id [String] Numeric ID, or barcode of tape.
    # @param [Hash] opts the optional parameters
    # @return [Array<(Tape, Integer, Hash)>] Tape data, response status code and response headers
    def show_tape_by_tape_library_with_http_info(tape_library_id, tape_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TapesApi.show_tape_by_tape_library ...'
      end
      # verify the required parameter 'tape_library_id' is set
      if @api_client.config.client_side_validation && tape_library_id.nil?
        fail ArgumentError, "Missing the required parameter 'tape_library_id' when calling TapesApi.show_tape_by_tape_library"
      end
      # verify the required parameter 'tape_id' is set
      if @api_client.config.client_side_validation && tape_id.nil?
        fail ArgumentError, "Missing the required parameter 'tape_id' when calling TapesApi.show_tape_by_tape_library"
      end
      # resource path
      local_var_path = '/tape_libraries/{tape_library_id}/tapes/{tape_id}'.sub('{' + 'tape_library_id' + '}', CGI.escape(tape_library_id.to_s)).sub('{' + 'tape_id' + '}', CGI.escape(tape_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'Tape' 

      # auth_names
      auth_names = opts[:auth_names] || ['BasicAuth', 'BearerAuth']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TapesApi#show_tape_by_tape_library\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Display statistic for a specific tape.
    # **API Key Scope**: tape_stats / show
    # @param tape_id [String] Numeric ID, or barcode of tape.
    # @param [Hash] opts the optional parameters
    # @return [TapeStat]
    def show_tape_stat(tape_id, opts = {})
      data, _status_code, _headers = show_tape_stat_with_http_info(tape_id, opts)
      data
    end

    # Display statistic for a specific tape.
    # **API Key Scope**: tape_stats / show
    # @param tape_id [String] Numeric ID, or barcode of tape.
    # @param [Hash] opts the optional parameters
    # @return [Array<(TapeStat, Integer, Hash)>] TapeStat data, response status code and response headers
    def show_tape_stat_with_http_info(tape_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TapesApi.show_tape_stat ...'
      end
      # verify the required parameter 'tape_id' is set
      if @api_client.config.client_side_validation && tape_id.nil?
        fail ArgumentError, "Missing the required parameter 'tape_id' when calling TapesApi.show_tape_stat"
      end
      # resource path
      local_var_path = '/tapes/{tape_id}/tape_stat'.sub('{' + 'tape_id' + '}', CGI.escape(tape_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'TapeStat' 

      # auth_names
      auth_names = opts[:auth_names] || ['BasicAuth', 'BearerAuth']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TapesApi#show_tape_stat\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Display statistic for a specific tape.
    # **API Key Scope**: tape_stats / show
    # @param pool_id [String] Numeric ID, or name of pool.
    # @param tape_id [String] Numeric ID, or barcode of tape.
    # @param [Hash] opts the optional parameters
    # @return [TapeStat]
    def show_tape_stat_by_pool(pool_id, tape_id, opts = {})
      data, _status_code, _headers = show_tape_stat_by_pool_with_http_info(pool_id, tape_id, opts)
      data
    end

    # Display statistic for a specific tape.
    # **API Key Scope**: tape_stats / show
    # @param pool_id [String] Numeric ID, or name of pool.
    # @param tape_id [String] Numeric ID, or barcode of tape.
    # @param [Hash] opts the optional parameters
    # @return [Array<(TapeStat, Integer, Hash)>] TapeStat data, response status code and response headers
    def show_tape_stat_by_pool_with_http_info(pool_id, tape_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TapesApi.show_tape_stat_by_pool ...'
      end
      # verify the required parameter 'pool_id' is set
      if @api_client.config.client_side_validation && pool_id.nil?
        fail ArgumentError, "Missing the required parameter 'pool_id' when calling TapesApi.show_tape_stat_by_pool"
      end
      # verify the required parameter 'tape_id' is set
      if @api_client.config.client_side_validation && tape_id.nil?
        fail ArgumentError, "Missing the required parameter 'tape_id' when calling TapesApi.show_tape_stat_by_pool"
      end
      # resource path
      local_var_path = '/pools/{pool_id}/tapes/{tape_id}/tape_stat'.sub('{' + 'pool_id' + '}', CGI.escape(pool_id.to_s)).sub('{' + 'tape_id' + '}', CGI.escape(tape_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'TapeStat' 

      # auth_names
      auth_names = opts[:auth_names] || ['BasicAuth', 'BearerAuth']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TapesApi#show_tape_stat_by_pool\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Display statistic for a specific tape.
    # **API Key Scope**: tape_stats / show
    # @param tape_library_id [String] Numeric ID, serial, or name of tape library.
    # @param tape_id [String] Numeric ID, or barcode of tape.
    # @param [Hash] opts the optional parameters
    # @return [TapeStat]
    def show_tape_stat_by_tape_library(tape_library_id, tape_id, opts = {})
      data, _status_code, _headers = show_tape_stat_by_tape_library_with_http_info(tape_library_id, tape_id, opts)
      data
    end

    # Display statistic for a specific tape.
    # **API Key Scope**: tape_stats / show
    # @param tape_library_id [String] Numeric ID, serial, or name of tape library.
    # @param tape_id [String] Numeric ID, or barcode of tape.
    # @param [Hash] opts the optional parameters
    # @return [Array<(TapeStat, Integer, Hash)>] TapeStat data, response status code and response headers
    def show_tape_stat_by_tape_library_with_http_info(tape_library_id, tape_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TapesApi.show_tape_stat_by_tape_library ...'
      end
      # verify the required parameter 'tape_library_id' is set
      if @api_client.config.client_side_validation && tape_library_id.nil?
        fail ArgumentError, "Missing the required parameter 'tape_library_id' when calling TapesApi.show_tape_stat_by_tape_library"
      end
      # verify the required parameter 'tape_id' is set
      if @api_client.config.client_side_validation && tape_id.nil?
        fail ArgumentError, "Missing the required parameter 'tape_id' when calling TapesApi.show_tape_stat_by_tape_library"
      end
      # resource path
      local_var_path = '/tape_libraries/{tape_library_id}/tapes/{tape_id}/tape_stat'.sub('{' + 'tape_library_id' + '}', CGI.escape(tape_library_id.to_s)).sub('{' + 'tape_id' + '}', CGI.escape(tape_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'TapeStat' 

      # auth_names
      auth_names = opts[:auth_names] || ['BasicAuth', 'BearerAuth']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TapesApi#show_tape_stat_by_tape_library\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
