=begin
#Nodeum API

#The Nodeum API makes it easy to tap into the digital data mesh that runs across your organisation. Make requests to our API endpoints and we’ll give you everything you need to interconnect your business workflows with your storage.  All production API requests are made to:  http://nodeumhostname/api/  The current production version of the API is v1.   **REST** The Nodeum API is a RESTful API. This means that the API is designed to allow you to get, create, update, & delete objects with the HTTP verbs GET, POST, PUT, PATCH, & DELETE.  **JSON** The Nodeum API speaks exclusively in JSON. This means that you should always set the Content-Type header to application/json to ensure that your requests are properly accepted and processed by the API.  **Authentication** All API calls require user-password authentication.   **Cross-Origin Resource Sharing** The Nodeum API supports CORS for communicating from Javascript for these endpoints. You will need to specify an Origin URI when creating your application to allow for CORS to be whitelisted for your domain.   **Pagination** Some endpoints such as File Listing return a potentially lengthy array of objects. In order to keep the response sizes manageable the API will take advantage of pagination. Pagination is a mechanism for returning a subset of the results for a request and allowing for subsequent requests to “page” through the rest of the results until the end is reached. Paginated endpoints follow a standard interface that accepts two query parameters, limit and offset, and return a payload that follows a standard form. These parameters names and their behavior are borrowed from SQL LIMIT and OFFSET keywords.  **Versioning** The Nodeum API is constantly being worked on to add features, make improvements, and fix bugs. This means that you should expect changes to be introduced and documented.   However, there are some changes or additions that are considered backwards-compatible and your applications should be flexible enough to handle them. These include:  - Adding new endpoints to the API - Adding new attributes to the response of an existing endpoint - Changing the order of attributes of responses (JSON by definition is an object of unordered key/value pairs)  **Filter parameters** When browsing a list of items, multiple filter parameters may be applied. Some operators can be added to the value as a prefix:  - `=` value is equal. Default operator, may be omitted  - `!=` value is different  - `>` greater than  - `>=` greater than or equal  - `<` lower than  - `>=` lower than or equal  - `><` included in list, items should be separated by `|`  - `!><` not included in list, items should be separated by `|`  - `~` pattern matching, may include `%` (any characters) and `_` (one character)  - `!~` pattern not matching, may include `%` (any characters) and `_` (one character)  

The version of the OpenAPI document: 2.1.0
Contact: info@nodeum.io
Generated by: https://openapi-generator.tech
OpenAPI Generator version: 4.3.0

=end

require 'cgi'

module Nodeum
  class TaskExecutionsApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Lists all task executions.
    # **API Key Scope**: task_executions / index
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :limit The number of items to display for pagination.
    # @option opts [Integer] :offset The number of items to skip for pagination.
    # @option opts [Array<String>] :sort_by Sort results by attribute.  Can sort on multiple attributes, separated by &#x60;|&#x60;. Order direction can be suffixing the attribute by either &#x60;:asc&#x60; (default) or &#x60;:desc&#x60;.
    # @option opts [Boolean] :complete_list If &#x60;false&#x60;, only includes the last correct execution of a task. (default to true)
    # @option opts [String] :id Filter on id
    # @option opts [String] :task_id Filter on task id
    # @option opts [String] :name Filter on name
    # @option opts [String] :workflow_type Filter on task workflow type
    # @option opts [String] :workflow_action Filter on task workflow action
    # @option opts [String] :source_type Filter on task source type
    # @option opts [String] :destination_type Filter on task destination type
    # @option opts [String] :status Filter on status
    # @option opts [String] :log_time Filter on log time
    # @option opts [String] :job_started Filter on job started
    # @option opts [String] :job_finished Filter on job finished
    # @option opts [String] :creation_date Filter on creation date
    # @option opts [String] :modification_date Filter on modification date
    # @option opts [String] :to_process_size Filter on to process size
    # @option opts [String] :processed_size Filter on processed size
    # @option opts [String] :to_process_files Filter on to process files
    # @option opts [String] :processed_files Filter on processed files
    # @option opts [String] :finalized_files Filter on finalized files
    # @option opts [String] :estimation_time Filter on estimation time
    # @option opts [String] :bandwidth Filter on bandwidth
    # @return [TaskExecutionCollection]
    def index_task_executions(opts = {})
      data, _status_code, _headers = index_task_executions_with_http_info(opts)
      data
    end

    # Lists all task executions.
    # **API Key Scope**: task_executions / index
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :limit The number of items to display for pagination.
    # @option opts [Integer] :offset The number of items to skip for pagination.
    # @option opts [Array<String>] :sort_by Sort results by attribute.  Can sort on multiple attributes, separated by &#x60;|&#x60;. Order direction can be suffixing the attribute by either &#x60;:asc&#x60; (default) or &#x60;:desc&#x60;.
    # @option opts [Boolean] :complete_list If &#x60;false&#x60;, only includes the last correct execution of a task.
    # @option opts [String] :id Filter on id
    # @option opts [String] :task_id Filter on task id
    # @option opts [String] :name Filter on name
    # @option opts [String] :workflow_type Filter on task workflow type
    # @option opts [String] :workflow_action Filter on task workflow action
    # @option opts [String] :source_type Filter on task source type
    # @option opts [String] :destination_type Filter on task destination type
    # @option opts [String] :status Filter on status
    # @option opts [String] :log_time Filter on log time
    # @option opts [String] :job_started Filter on job started
    # @option opts [String] :job_finished Filter on job finished
    # @option opts [String] :creation_date Filter on creation date
    # @option opts [String] :modification_date Filter on modification date
    # @option opts [String] :to_process_size Filter on to process size
    # @option opts [String] :processed_size Filter on processed size
    # @option opts [String] :to_process_files Filter on to process files
    # @option opts [String] :processed_files Filter on processed files
    # @option opts [String] :finalized_files Filter on finalized files
    # @option opts [String] :estimation_time Filter on estimation time
    # @option opts [String] :bandwidth Filter on bandwidth
    # @return [Array<(TaskExecutionCollection, Integer, Hash)>] TaskExecutionCollection data, response status code and response headers
    def index_task_executions_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TaskExecutionsApi.index_task_executions ...'
      end
      # resource path
      local_var_path = '/task_executions'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?
      query_params[:'sort_by'] = @api_client.build_collection_param(opts[:'sort_by'], :pipe) if !opts[:'sort_by'].nil?
      query_params[:'complete_list'] = opts[:'complete_list'] if !opts[:'complete_list'].nil?
      query_params[:'id'] = opts[:'id'] if !opts[:'id'].nil?
      query_params[:'task_id'] = opts[:'task_id'] if !opts[:'task_id'].nil?
      query_params[:'name'] = opts[:'name'] if !opts[:'name'].nil?
      query_params[:'workflow_type'] = opts[:'workflow_type'] if !opts[:'workflow_type'].nil?
      query_params[:'workflow_action'] = opts[:'workflow_action'] if !opts[:'workflow_action'].nil?
      query_params[:'source_type'] = opts[:'source_type'] if !opts[:'source_type'].nil?
      query_params[:'destination_type'] = opts[:'destination_type'] if !opts[:'destination_type'].nil?
      query_params[:'status'] = opts[:'status'] if !opts[:'status'].nil?
      query_params[:'log_time'] = opts[:'log_time'] if !opts[:'log_time'].nil?
      query_params[:'job_started'] = opts[:'job_started'] if !opts[:'job_started'].nil?
      query_params[:'job_finished'] = opts[:'job_finished'] if !opts[:'job_finished'].nil?
      query_params[:'creation_date'] = opts[:'creation_date'] if !opts[:'creation_date'].nil?
      query_params[:'modification_date'] = opts[:'modification_date'] if !opts[:'modification_date'].nil?
      query_params[:'to_process_size'] = opts[:'to_process_size'] if !opts[:'to_process_size'].nil?
      query_params[:'processed_size'] = opts[:'processed_size'] if !opts[:'processed_size'].nil?
      query_params[:'to_process_files'] = opts[:'to_process_files'] if !opts[:'to_process_files'].nil?
      query_params[:'processed_files'] = opts[:'processed_files'] if !opts[:'processed_files'].nil?
      query_params[:'finalized_files'] = opts[:'finalized_files'] if !opts[:'finalized_files'].nil?
      query_params[:'estimation_time'] = opts[:'estimation_time'] if !opts[:'estimation_time'].nil?
      query_params[:'bandwidth'] = opts[:'bandwidth'] if !opts[:'bandwidth'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'TaskExecutionCollection' 

      # auth_names
      auth_names = opts[:auth_names] || ['BasicAuth', 'BearerAuth']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TaskExecutionsApi#index_task_executions\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Lists all task executions.
    # **API Key Scope**: task_executions / index
    # @param [Hash] opts the optional parameters
    # @option opts [String] :task_id Filter on task id
    # @option opts [Integer] :limit The number of items to display for pagination.
    # @option opts [Integer] :offset The number of items to skip for pagination.
    # @option opts [Array<String>] :sort_by Sort results by attribute.  Can sort on multiple attributes, separated by &#x60;|&#x60;. Order direction can be suffixing the attribute by either &#x60;:asc&#x60; (default) or &#x60;:desc&#x60;.
    # @option opts [String] :id Filter on id
    # @option opts [String] :name Filter on name
    # @option opts [String] :workflow_type Filter on task workflow type
    # @option opts [String] :workflow_action Filter on task workflow action
    # @option opts [String] :source_type Filter on task source type
    # @option opts [String] :destination_type Filter on task destination type
    # @option opts [String] :status Filter on status
    # @option opts [String] :log_time Filter on log time
    # @option opts [String] :job_started Filter on job started
    # @option opts [String] :job_finished Filter on job finished
    # @option opts [String] :to_process_size Filter on to process size
    # @option opts [String] :processed_size Filter on processed size
    # @option opts [String] :to_process_files Filter on to process files
    # @option opts [String] :processed_files Filter on processed files
    # @option opts [String] :finalized_files Filter on finalized files
    # @option opts [String] :estimation_time Filter on estimation time
    # @option opts [String] :bandwidth Filter on bandwidth
    # @return [TaskExecutionCollection]
    def index_task_executions_by_task(opts = {})
      data, _status_code, _headers = index_task_executions_by_task_with_http_info(opts)
      data
    end

    # Lists all task executions.
    # **API Key Scope**: task_executions / index
    # @param [Hash] opts the optional parameters
    # @option opts [String] :task_id Filter on task id
    # @option opts [Integer] :limit The number of items to display for pagination.
    # @option opts [Integer] :offset The number of items to skip for pagination.
    # @option opts [Array<String>] :sort_by Sort results by attribute.  Can sort on multiple attributes, separated by &#x60;|&#x60;. Order direction can be suffixing the attribute by either &#x60;:asc&#x60; (default) or &#x60;:desc&#x60;.
    # @option opts [String] :id Filter on id
    # @option opts [String] :name Filter on name
    # @option opts [String] :workflow_type Filter on task workflow type
    # @option opts [String] :workflow_action Filter on task workflow action
    # @option opts [String] :source_type Filter on task source type
    # @option opts [String] :destination_type Filter on task destination type
    # @option opts [String] :status Filter on status
    # @option opts [String] :log_time Filter on log time
    # @option opts [String] :job_started Filter on job started
    # @option opts [String] :job_finished Filter on job finished
    # @option opts [String] :to_process_size Filter on to process size
    # @option opts [String] :processed_size Filter on processed size
    # @option opts [String] :to_process_files Filter on to process files
    # @option opts [String] :processed_files Filter on processed files
    # @option opts [String] :finalized_files Filter on finalized files
    # @option opts [String] :estimation_time Filter on estimation time
    # @option opts [String] :bandwidth Filter on bandwidth
    # @return [Array<(TaskExecutionCollection, Integer, Hash)>] TaskExecutionCollection data, response status code and response headers
    def index_task_executions_by_task_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TaskExecutionsApi.index_task_executions_by_task ...'
      end
      # resource path
      local_var_path = '/tasks/{task_id}/task_executions'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'task_id'] = opts[:'task_id'] if !opts[:'task_id'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?
      query_params[:'sort_by'] = @api_client.build_collection_param(opts[:'sort_by'], :pipe) if !opts[:'sort_by'].nil?
      query_params[:'id'] = opts[:'id'] if !opts[:'id'].nil?
      query_params[:'name'] = opts[:'name'] if !opts[:'name'].nil?
      query_params[:'workflow_type'] = opts[:'workflow_type'] if !opts[:'workflow_type'].nil?
      query_params[:'workflow_action'] = opts[:'workflow_action'] if !opts[:'workflow_action'].nil?
      query_params[:'source_type'] = opts[:'source_type'] if !opts[:'source_type'].nil?
      query_params[:'destination_type'] = opts[:'destination_type'] if !opts[:'destination_type'].nil?
      query_params[:'status'] = opts[:'status'] if !opts[:'status'].nil?
      query_params[:'log_time'] = opts[:'log_time'] if !opts[:'log_time'].nil?
      query_params[:'job_started'] = opts[:'job_started'] if !opts[:'job_started'].nil?
      query_params[:'job_finished'] = opts[:'job_finished'] if !opts[:'job_finished'].nil?
      query_params[:'to_process_size'] = opts[:'to_process_size'] if !opts[:'to_process_size'].nil?
      query_params[:'processed_size'] = opts[:'processed_size'] if !opts[:'processed_size'].nil?
      query_params[:'to_process_files'] = opts[:'to_process_files'] if !opts[:'to_process_files'].nil?
      query_params[:'processed_files'] = opts[:'processed_files'] if !opts[:'processed_files'].nil?
      query_params[:'finalized_files'] = opts[:'finalized_files'] if !opts[:'finalized_files'].nil?
      query_params[:'estimation_time'] = opts[:'estimation_time'] if !opts[:'estimation_time'].nil?
      query_params[:'bandwidth'] = opts[:'bandwidth'] if !opts[:'bandwidth'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'TaskExecutionCollection' 

      # auth_names
      auth_names = opts[:auth_names] || ['BasicAuth', 'BearerAuth']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TaskExecutionsApi#index_task_executions_by_task\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Displays a specific task execution.
    # **API Key Scope**: task_executions / show
    # @param task_execution_id [String] Numeric ID of task execution.
    # @param [Hash] opts the optional parameters
    # @return [TaskExecution]
    def show_task_execution(task_execution_id, opts = {})
      data, _status_code, _headers = show_task_execution_with_http_info(task_execution_id, opts)
      data
    end

    # Displays a specific task execution.
    # **API Key Scope**: task_executions / show
    # @param task_execution_id [String] Numeric ID of task execution.
    # @param [Hash] opts the optional parameters
    # @return [Array<(TaskExecution, Integer, Hash)>] TaskExecution data, response status code and response headers
    def show_task_execution_with_http_info(task_execution_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TaskExecutionsApi.show_task_execution ...'
      end
      # verify the required parameter 'task_execution_id' is set
      if @api_client.config.client_side_validation && task_execution_id.nil?
        fail ArgumentError, "Missing the required parameter 'task_execution_id' when calling TaskExecutionsApi.show_task_execution"
      end
      # resource path
      local_var_path = '/task_executions/{task_execution_id}'.sub('{' + 'task_execution_id' + '}', CGI.escape(task_execution_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'TaskExecution' 

      # auth_names
      auth_names = opts[:auth_names] || ['BasicAuth', 'BearerAuth']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TaskExecutionsApi#show_task_execution\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Displays a specific task execution.
    # **API Key Scope**: task_executions / show
    # @param task_id [String] Numeric ID or name of task. Task names are not unique, it&#39;s recommanded to use numeric ID.
    # @param task_execution_id [String] Numeric ID of task execution.
    # @param [Hash] opts the optional parameters
    # @return [TaskExecution]
    def show_task_execution_by_task(task_id, task_execution_id, opts = {})
      data, _status_code, _headers = show_task_execution_by_task_with_http_info(task_id, task_execution_id, opts)
      data
    end

    # Displays a specific task execution.
    # **API Key Scope**: task_executions / show
    # @param task_id [String] Numeric ID or name of task. Task names are not unique, it&#39;s recommanded to use numeric ID.
    # @param task_execution_id [String] Numeric ID of task execution.
    # @param [Hash] opts the optional parameters
    # @return [Array<(TaskExecution, Integer, Hash)>] TaskExecution data, response status code and response headers
    def show_task_execution_by_task_with_http_info(task_id, task_execution_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TaskExecutionsApi.show_task_execution_by_task ...'
      end
      # verify the required parameter 'task_id' is set
      if @api_client.config.client_side_validation && task_id.nil?
        fail ArgumentError, "Missing the required parameter 'task_id' when calling TaskExecutionsApi.show_task_execution_by_task"
      end
      # verify the required parameter 'task_execution_id' is set
      if @api_client.config.client_side_validation && task_execution_id.nil?
        fail ArgumentError, "Missing the required parameter 'task_execution_id' when calling TaskExecutionsApi.show_task_execution_by_task"
      end
      # resource path
      local_var_path = '/tasks/{task_id}/task_executions/{task_execution_id}'.sub('{' + 'task_id' + '}', CGI.escape(task_id.to_s)).sub('{' + 'task_execution_id' + '}', CGI.escape(task_execution_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'TaskExecution' 

      # auth_names
      auth_names = opts[:auth_names] || ['BasicAuth', 'BearerAuth']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TaskExecutionsApi#show_task_execution_by_task\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
