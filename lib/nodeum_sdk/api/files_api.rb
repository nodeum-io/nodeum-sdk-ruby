=begin
#Nodeum API

#The Nodeum API makes it easy to tap into the digital data mesh that runs across your organisation. Make requests to our API endpoints and we’ll give you everything you need to interconnect your business workflows with your storage.  All production API requests are made to:  http://nodeumhostname/api/  The current production version of the API is v1.   **REST** The Nodeum API is a RESTful API. This means that the API is designed to allow you to get, create, update, & delete objects with the HTTP verbs GET, POST, PUT, PATCH, & DELETE.  **JSON** The Nodeum API speaks exclusively in JSON. This means that you should always set the Content-Type header to application/json to ensure that your requests are properly accepted and processed by the API.  **Authentication** All API calls require user-password authentication.   **Cross-Origin Resource Sharing** The Nodeum API supports CORS for communicating from Javascript for these endpoints. You will need to specify an Origin URI when creating your application to allow for CORS to be whitelisted for your domain.   **Pagination** Some endpoints such as File Listing return a potentially lengthy array of objects. In order to keep the response sizes manageable the API will take advantage of pagination. Pagination is a mechanism for returning a subset of the results for a request and allowing for subsequent requests to “page” through the rest of the results until the end is reached. Paginated endpoints follow a standard interface that accepts two query parameters, limit and offset, and return a payload that follows a standard form. These parameters names and their behavior are borrowed from SQL LIMIT and OFFSET keywords.  **Versioning** The Nodeum API is constantly being worked on to add features, make improvements, and fix bugs. This means that you should expect changes to be introduced and documented.   However, there are some changes or additions that are considered backwards-compatible and your applications should be flexible enough to handle them. These include:  - Adding new endpoints to the API - Adding new attributes to the response of an existing endpoint - Changing the order of attributes of responses (JSON by definition is an object of unordered key/value pairs)  **Filter parameters** When browsing a list of items, multiple filter parameters may be applied. Some operators can be added to the value as a prefix:  - `=` value is equal. Default operator, may be omitted  - `!=` value is different  - `>` greater than  - `>=` greater than or equal  - `<` lower than  - `>=` lower than or equal  - `><` included in list, items should be separated by `|`  - `!><` not included in list, items should be separated by `|`  - `~` pattern matching, may include `%` (any characters) and `_` (one character)  - `!~` pattern not matching, may include `%` (any characters) and `_` (one character)  

The version of the OpenAPI document: 2.1.0
Contact: info@nodeum.io
Generated by: https://openapi-generator.tech
OpenAPI Generator version: 4.3.0

=end

require 'cgi'

module Nodeum
  class FilesApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Lists files under a specific folder.
    # **API Key Scope**: files / index
    # @param file_parent_id [Integer] Numeric ID of parent folder.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :limit The number of items to display for pagination.
    # @option opts [Integer] :offset The number of items to skip for pagination.
    # @option opts [String] :file_id Filter on file id
    # @option opts [String] :name Filter on name
    # @option opts [String] :type Filter on type
    # @option opts [String] :permission Filter on permission
    # @option opts [String] :size Filter on size
    # @option opts [String] :change_date Filter on change date
    # @option opts [String] :modification_date Filter on modification date
    # @option opts [String] :access_date Filter on access date
    # @option opts [String] :gid Filter on gid
    # @option opts [String] :uid Filter on uid
    # @return [NodeumFileCollection]
    def files_children(file_parent_id, opts = {})
      data, _status_code, _headers = files_children_with_http_info(file_parent_id, opts)
      data
    end

    # Lists files under a specific folder.
    # **API Key Scope**: files / index
    # @param file_parent_id [Integer] Numeric ID of parent folder.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :limit The number of items to display for pagination.
    # @option opts [Integer] :offset The number of items to skip for pagination.
    # @option opts [String] :file_id Filter on file id
    # @option opts [String] :name Filter on name
    # @option opts [String] :type Filter on type
    # @option opts [String] :permission Filter on permission
    # @option opts [String] :size Filter on size
    # @option opts [String] :change_date Filter on change date
    # @option opts [String] :modification_date Filter on modification date
    # @option opts [String] :access_date Filter on access date
    # @option opts [String] :gid Filter on gid
    # @option opts [String] :uid Filter on uid
    # @return [Array<(NodeumFileCollection, Integer, Hash)>] NodeumFileCollection data, response status code and response headers
    def files_children_with_http_info(file_parent_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: FilesApi.files_children ...'
      end
      # verify the required parameter 'file_parent_id' is set
      if @api_client.config.client_side_validation && file_parent_id.nil?
        fail ArgumentError, "Missing the required parameter 'file_parent_id' when calling FilesApi.files_children"
      end
      # resource path
      local_var_path = '/files/{file_parent_id}/children'.sub('{' + 'file_parent_id' + '}', CGI.escape(file_parent_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?
      query_params[:'file_id'] = opts[:'file_id'] if !opts[:'file_id'].nil?
      query_params[:'name'] = opts[:'name'] if !opts[:'name'].nil?
      query_params[:'type'] = opts[:'type'] if !opts[:'type'].nil?
      query_params[:'permission'] = opts[:'permission'] if !opts[:'permission'].nil?
      query_params[:'size'] = opts[:'size'] if !opts[:'size'].nil?
      query_params[:'change_date'] = opts[:'change_date'] if !opts[:'change_date'].nil?
      query_params[:'modification_date'] = opts[:'modification_date'] if !opts[:'modification_date'].nil?
      query_params[:'access_date'] = opts[:'access_date'] if !opts[:'access_date'].nil?
      query_params[:'gid'] = opts[:'gid'] if !opts[:'gid'].nil?
      query_params[:'uid'] = opts[:'uid'] if !opts[:'uid'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'NodeumFileCollection' 

      # auth_names
      auth_names = opts[:auth_names] || ['BasicAuth', 'BearerAuth']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: FilesApi#files_children\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Lists files under a specific folder.
    # **API Key Scope**: files / index
    # @param container_id [String] Numeric ID or name of container.
    # @param file_parent_id [Integer] Numeric ID of parent folder.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :limit The number of items to display for pagination.
    # @option opts [Integer] :offset The number of items to skip for pagination.
    # @option opts [String] :file_id Filter on file id
    # @option opts [String] :name Filter on name
    # @option opts [String] :type Filter on type
    # @option opts [String] :permission Filter on permission
    # @option opts [String] :size Filter on size
    # @option opts [String] :change_date Filter on change date
    # @option opts [String] :modification_date Filter on modification date
    # @option opts [String] :access_date Filter on access date
    # @option opts [String] :gid Filter on gid
    # @option opts [String] :uid Filter on uid
    # @return [NodeumFileCollection]
    def files_children_by_container(container_id, file_parent_id, opts = {})
      data, _status_code, _headers = files_children_by_container_with_http_info(container_id, file_parent_id, opts)
      data
    end

    # Lists files under a specific folder.
    # **API Key Scope**: files / index
    # @param container_id [String] Numeric ID or name of container.
    # @param file_parent_id [Integer] Numeric ID of parent folder.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :limit The number of items to display for pagination.
    # @option opts [Integer] :offset The number of items to skip for pagination.
    # @option opts [String] :file_id Filter on file id
    # @option opts [String] :name Filter on name
    # @option opts [String] :type Filter on type
    # @option opts [String] :permission Filter on permission
    # @option opts [String] :size Filter on size
    # @option opts [String] :change_date Filter on change date
    # @option opts [String] :modification_date Filter on modification date
    # @option opts [String] :access_date Filter on access date
    # @option opts [String] :gid Filter on gid
    # @option opts [String] :uid Filter on uid
    # @return [Array<(NodeumFileCollection, Integer, Hash)>] NodeumFileCollection data, response status code and response headers
    def files_children_by_container_with_http_info(container_id, file_parent_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: FilesApi.files_children_by_container ...'
      end
      # verify the required parameter 'container_id' is set
      if @api_client.config.client_side_validation && container_id.nil?
        fail ArgumentError, "Missing the required parameter 'container_id' when calling FilesApi.files_children_by_container"
      end
      # verify the required parameter 'file_parent_id' is set
      if @api_client.config.client_side_validation && file_parent_id.nil?
        fail ArgumentError, "Missing the required parameter 'file_parent_id' when calling FilesApi.files_children_by_container"
      end
      # resource path
      local_var_path = '/containers/{container_id}/files/{file_parent_id}/children'.sub('{' + 'container_id' + '}', CGI.escape(container_id.to_s)).sub('{' + 'file_parent_id' + '}', CGI.escape(file_parent_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?
      query_params[:'file_id'] = opts[:'file_id'] if !opts[:'file_id'].nil?
      query_params[:'name'] = opts[:'name'] if !opts[:'name'].nil?
      query_params[:'type'] = opts[:'type'] if !opts[:'type'].nil?
      query_params[:'permission'] = opts[:'permission'] if !opts[:'permission'].nil?
      query_params[:'size'] = opts[:'size'] if !opts[:'size'].nil?
      query_params[:'change_date'] = opts[:'change_date'] if !opts[:'change_date'].nil?
      query_params[:'modification_date'] = opts[:'modification_date'] if !opts[:'modification_date'].nil?
      query_params[:'access_date'] = opts[:'access_date'] if !opts[:'access_date'].nil?
      query_params[:'gid'] = opts[:'gid'] if !opts[:'gid'].nil?
      query_params[:'uid'] = opts[:'uid'] if !opts[:'uid'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'NodeumFileCollection' 

      # auth_names
      auth_names = opts[:auth_names] || ['BasicAuth', 'BearerAuth']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: FilesApi#files_children_by_container\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Lists files under a specific folder.
    # **API Key Scope**: files / index
    # @param pool_id [String] Numeric ID, or name of pool.
    # @param file_parent_id [Integer] Numeric ID of parent folder.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :limit The number of items to display for pagination.
    # @option opts [Integer] :offset The number of items to skip for pagination.
    # @option opts [String] :file_id Filter on file id
    # @option opts [String] :name Filter on name
    # @option opts [String] :type Filter on type
    # @option opts [String] :permission Filter on permission
    # @option opts [String] :size Filter on size
    # @option opts [String] :change_date Filter on change date
    # @option opts [String] :modification_date Filter on modification date
    # @option opts [String] :access_date Filter on access date
    # @option opts [String] :gid Filter on gid
    # @option opts [String] :uid Filter on uid
    # @return [NodeumFileCollection]
    def files_children_by_pool(pool_id, file_parent_id, opts = {})
      data, _status_code, _headers = files_children_by_pool_with_http_info(pool_id, file_parent_id, opts)
      data
    end

    # Lists files under a specific folder.
    # **API Key Scope**: files / index
    # @param pool_id [String] Numeric ID, or name of pool.
    # @param file_parent_id [Integer] Numeric ID of parent folder.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :limit The number of items to display for pagination.
    # @option opts [Integer] :offset The number of items to skip for pagination.
    # @option opts [String] :file_id Filter on file id
    # @option opts [String] :name Filter on name
    # @option opts [String] :type Filter on type
    # @option opts [String] :permission Filter on permission
    # @option opts [String] :size Filter on size
    # @option opts [String] :change_date Filter on change date
    # @option opts [String] :modification_date Filter on modification date
    # @option opts [String] :access_date Filter on access date
    # @option opts [String] :gid Filter on gid
    # @option opts [String] :uid Filter on uid
    # @return [Array<(NodeumFileCollection, Integer, Hash)>] NodeumFileCollection data, response status code and response headers
    def files_children_by_pool_with_http_info(pool_id, file_parent_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: FilesApi.files_children_by_pool ...'
      end
      # verify the required parameter 'pool_id' is set
      if @api_client.config.client_side_validation && pool_id.nil?
        fail ArgumentError, "Missing the required parameter 'pool_id' when calling FilesApi.files_children_by_pool"
      end
      # verify the required parameter 'file_parent_id' is set
      if @api_client.config.client_side_validation && file_parent_id.nil?
        fail ArgumentError, "Missing the required parameter 'file_parent_id' when calling FilesApi.files_children_by_pool"
      end
      # resource path
      local_var_path = '/pools/{pool_id}/files/{file_parent_id}/children'.sub('{' + 'pool_id' + '}', CGI.escape(pool_id.to_s)).sub('{' + 'file_parent_id' + '}', CGI.escape(file_parent_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?
      query_params[:'file_id'] = opts[:'file_id'] if !opts[:'file_id'].nil?
      query_params[:'name'] = opts[:'name'] if !opts[:'name'].nil?
      query_params[:'type'] = opts[:'type'] if !opts[:'type'].nil?
      query_params[:'permission'] = opts[:'permission'] if !opts[:'permission'].nil?
      query_params[:'size'] = opts[:'size'] if !opts[:'size'].nil?
      query_params[:'change_date'] = opts[:'change_date'] if !opts[:'change_date'].nil?
      query_params[:'modification_date'] = opts[:'modification_date'] if !opts[:'modification_date'].nil?
      query_params[:'access_date'] = opts[:'access_date'] if !opts[:'access_date'].nil?
      query_params[:'gid'] = opts[:'gid'] if !opts[:'gid'].nil?
      query_params[:'uid'] = opts[:'uid'] if !opts[:'uid'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'NodeumFileCollection' 

      # auth_names
      auth_names = opts[:auth_names] || ['BasicAuth', 'BearerAuth']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: FilesApi#files_children_by_pool\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Lists files under a specific folder.
    # **API Key Scope**: files / index
    # @param task_id [String] Numeric ID or name of task. Task names are not unique, it&#39;s recommanded to use numeric ID.
    # @param file_parent_id [Integer] Numeric ID of parent folder.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :limit The number of items to display for pagination.
    # @option opts [Integer] :offset The number of items to skip for pagination.
    # @option opts [String] :file_id Filter on file id
    # @option opts [String] :name Filter on name
    # @option opts [String] :type Filter on type
    # @option opts [String] :permission Filter on permission
    # @option opts [String] :size Filter on size
    # @option opts [String] :change_date Filter on change date
    # @option opts [String] :modification_date Filter on modification date
    # @option opts [String] :access_date Filter on access date
    # @option opts [String] :gid Filter on gid
    # @option opts [String] :uid Filter on uid
    # @return [NodeumFileCollection]
    def files_children_by_task(task_id, file_parent_id, opts = {})
      data, _status_code, _headers = files_children_by_task_with_http_info(task_id, file_parent_id, opts)
      data
    end

    # Lists files under a specific folder.
    # **API Key Scope**: files / index
    # @param task_id [String] Numeric ID or name of task. Task names are not unique, it&#39;s recommanded to use numeric ID.
    # @param file_parent_id [Integer] Numeric ID of parent folder.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :limit The number of items to display for pagination.
    # @option opts [Integer] :offset The number of items to skip for pagination.
    # @option opts [String] :file_id Filter on file id
    # @option opts [String] :name Filter on name
    # @option opts [String] :type Filter on type
    # @option opts [String] :permission Filter on permission
    # @option opts [String] :size Filter on size
    # @option opts [String] :change_date Filter on change date
    # @option opts [String] :modification_date Filter on modification date
    # @option opts [String] :access_date Filter on access date
    # @option opts [String] :gid Filter on gid
    # @option opts [String] :uid Filter on uid
    # @return [Array<(NodeumFileCollection, Integer, Hash)>] NodeumFileCollection data, response status code and response headers
    def files_children_by_task_with_http_info(task_id, file_parent_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: FilesApi.files_children_by_task ...'
      end
      # verify the required parameter 'task_id' is set
      if @api_client.config.client_side_validation && task_id.nil?
        fail ArgumentError, "Missing the required parameter 'task_id' when calling FilesApi.files_children_by_task"
      end
      # verify the required parameter 'file_parent_id' is set
      if @api_client.config.client_side_validation && file_parent_id.nil?
        fail ArgumentError, "Missing the required parameter 'file_parent_id' when calling FilesApi.files_children_by_task"
      end
      # resource path
      local_var_path = '/tasks/{task_id}/files/{file_parent_id}/children'.sub('{' + 'task_id' + '}', CGI.escape(task_id.to_s)).sub('{' + 'file_parent_id' + '}', CGI.escape(file_parent_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?
      query_params[:'file_id'] = opts[:'file_id'] if !opts[:'file_id'].nil?
      query_params[:'name'] = opts[:'name'] if !opts[:'name'].nil?
      query_params[:'type'] = opts[:'type'] if !opts[:'type'].nil?
      query_params[:'permission'] = opts[:'permission'] if !opts[:'permission'].nil?
      query_params[:'size'] = opts[:'size'] if !opts[:'size'].nil?
      query_params[:'change_date'] = opts[:'change_date'] if !opts[:'change_date'].nil?
      query_params[:'modification_date'] = opts[:'modification_date'] if !opts[:'modification_date'].nil?
      query_params[:'access_date'] = opts[:'access_date'] if !opts[:'access_date'].nil?
      query_params[:'gid'] = opts[:'gid'] if !opts[:'gid'].nil?
      query_params[:'uid'] = opts[:'uid'] if !opts[:'uid'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'NodeumFileCollection' 

      # auth_names
      auth_names = opts[:auth_names] || ['BasicAuth', 'BearerAuth']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: FilesApi#files_children_by_task\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Lists files under a specific folder.
    # **API Key Scope**: files / index
    # @param task_execution_id [String] Numeric ID of task execution.
    # @param file_parent_id [Integer] Numeric ID of parent folder.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :limit The number of items to display for pagination.
    # @option opts [Integer] :offset The number of items to skip for pagination.
    # @option opts [String] :file_id Filter on file id
    # @option opts [String] :name Filter on name
    # @option opts [String] :type Filter on type
    # @option opts [String] :permission Filter on permission
    # @option opts [String] :size Filter on size
    # @option opts [String] :change_date Filter on change date
    # @option opts [String] :modification_date Filter on modification date
    # @option opts [String] :access_date Filter on access date
    # @option opts [String] :gid Filter on gid
    # @option opts [String] :uid Filter on uid
    # @return [NodeumFileCollection]
    def files_children_by_task_execution(task_execution_id, file_parent_id, opts = {})
      data, _status_code, _headers = files_children_by_task_execution_with_http_info(task_execution_id, file_parent_id, opts)
      data
    end

    # Lists files under a specific folder.
    # **API Key Scope**: files / index
    # @param task_execution_id [String] Numeric ID of task execution.
    # @param file_parent_id [Integer] Numeric ID of parent folder.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :limit The number of items to display for pagination.
    # @option opts [Integer] :offset The number of items to skip for pagination.
    # @option opts [String] :file_id Filter on file id
    # @option opts [String] :name Filter on name
    # @option opts [String] :type Filter on type
    # @option opts [String] :permission Filter on permission
    # @option opts [String] :size Filter on size
    # @option opts [String] :change_date Filter on change date
    # @option opts [String] :modification_date Filter on modification date
    # @option opts [String] :access_date Filter on access date
    # @option opts [String] :gid Filter on gid
    # @option opts [String] :uid Filter on uid
    # @return [Array<(NodeumFileCollection, Integer, Hash)>] NodeumFileCollection data, response status code and response headers
    def files_children_by_task_execution_with_http_info(task_execution_id, file_parent_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: FilesApi.files_children_by_task_execution ...'
      end
      # verify the required parameter 'task_execution_id' is set
      if @api_client.config.client_side_validation && task_execution_id.nil?
        fail ArgumentError, "Missing the required parameter 'task_execution_id' when calling FilesApi.files_children_by_task_execution"
      end
      # verify the required parameter 'file_parent_id' is set
      if @api_client.config.client_side_validation && file_parent_id.nil?
        fail ArgumentError, "Missing the required parameter 'file_parent_id' when calling FilesApi.files_children_by_task_execution"
      end
      # resource path
      local_var_path = '/task_executions/{task_execution_id}/files/{file_parent_id}/children'.sub('{' + 'task_execution_id' + '}', CGI.escape(task_execution_id.to_s)).sub('{' + 'file_parent_id' + '}', CGI.escape(file_parent_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?
      query_params[:'file_id'] = opts[:'file_id'] if !opts[:'file_id'].nil?
      query_params[:'name'] = opts[:'name'] if !opts[:'name'].nil?
      query_params[:'type'] = opts[:'type'] if !opts[:'type'].nil?
      query_params[:'permission'] = opts[:'permission'] if !opts[:'permission'].nil?
      query_params[:'size'] = opts[:'size'] if !opts[:'size'].nil?
      query_params[:'change_date'] = opts[:'change_date'] if !opts[:'change_date'].nil?
      query_params[:'modification_date'] = opts[:'modification_date'] if !opts[:'modification_date'].nil?
      query_params[:'access_date'] = opts[:'access_date'] if !opts[:'access_date'].nil?
      query_params[:'gid'] = opts[:'gid'] if !opts[:'gid'].nil?
      query_params[:'uid'] = opts[:'uid'] if !opts[:'uid'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'NodeumFileCollection' 

      # auth_names
      auth_names = opts[:auth_names] || ['BasicAuth', 'BearerAuth']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: FilesApi#files_children_by_task_execution\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Lists files under a specific folder.
    # **API Key Scope**: files / index
    # @param task_id [String] Numeric ID or name of task. Task names are not unique, it&#39;s recommanded to use numeric ID.
    # @param task_execution_id [String] Numeric ID of task execution.
    # @param file_parent_id [Integer] Numeric ID of parent folder.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :limit The number of items to display for pagination.
    # @option opts [Integer] :offset The number of items to skip for pagination.
    # @option opts [String] :file_id Filter on file id
    # @option opts [String] :name Filter on name
    # @option opts [String] :type Filter on type
    # @option opts [String] :permission Filter on permission
    # @option opts [String] :size Filter on size
    # @option opts [String] :change_date Filter on change date
    # @option opts [String] :modification_date Filter on modification date
    # @option opts [String] :access_date Filter on access date
    # @option opts [String] :gid Filter on gid
    # @option opts [String] :uid Filter on uid
    # @return [NodeumFileCollection]
    def files_children_by_task_execution_by_task(task_id, task_execution_id, file_parent_id, opts = {})
      data, _status_code, _headers = files_children_by_task_execution_by_task_with_http_info(task_id, task_execution_id, file_parent_id, opts)
      data
    end

    # Lists files under a specific folder.
    # **API Key Scope**: files / index
    # @param task_id [String] Numeric ID or name of task. Task names are not unique, it&#39;s recommanded to use numeric ID.
    # @param task_execution_id [String] Numeric ID of task execution.
    # @param file_parent_id [Integer] Numeric ID of parent folder.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :limit The number of items to display for pagination.
    # @option opts [Integer] :offset The number of items to skip for pagination.
    # @option opts [String] :file_id Filter on file id
    # @option opts [String] :name Filter on name
    # @option opts [String] :type Filter on type
    # @option opts [String] :permission Filter on permission
    # @option opts [String] :size Filter on size
    # @option opts [String] :change_date Filter on change date
    # @option opts [String] :modification_date Filter on modification date
    # @option opts [String] :access_date Filter on access date
    # @option opts [String] :gid Filter on gid
    # @option opts [String] :uid Filter on uid
    # @return [Array<(NodeumFileCollection, Integer, Hash)>] NodeumFileCollection data, response status code and response headers
    def files_children_by_task_execution_by_task_with_http_info(task_id, task_execution_id, file_parent_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: FilesApi.files_children_by_task_execution_by_task ...'
      end
      # verify the required parameter 'task_id' is set
      if @api_client.config.client_side_validation && task_id.nil?
        fail ArgumentError, "Missing the required parameter 'task_id' when calling FilesApi.files_children_by_task_execution_by_task"
      end
      # verify the required parameter 'task_execution_id' is set
      if @api_client.config.client_side_validation && task_execution_id.nil?
        fail ArgumentError, "Missing the required parameter 'task_execution_id' when calling FilesApi.files_children_by_task_execution_by_task"
      end
      # verify the required parameter 'file_parent_id' is set
      if @api_client.config.client_side_validation && file_parent_id.nil?
        fail ArgumentError, "Missing the required parameter 'file_parent_id' when calling FilesApi.files_children_by_task_execution_by_task"
      end
      # resource path
      local_var_path = '/tasks/{task_id}/task_executions/{task_execution_id}/files/{file_parent_id}/children'.sub('{' + 'task_id' + '}', CGI.escape(task_id.to_s)).sub('{' + 'task_execution_id' + '}', CGI.escape(task_execution_id.to_s)).sub('{' + 'file_parent_id' + '}', CGI.escape(file_parent_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?
      query_params[:'file_id'] = opts[:'file_id'] if !opts[:'file_id'].nil?
      query_params[:'name'] = opts[:'name'] if !opts[:'name'].nil?
      query_params[:'type'] = opts[:'type'] if !opts[:'type'].nil?
      query_params[:'permission'] = opts[:'permission'] if !opts[:'permission'].nil?
      query_params[:'size'] = opts[:'size'] if !opts[:'size'].nil?
      query_params[:'change_date'] = opts[:'change_date'] if !opts[:'change_date'].nil?
      query_params[:'modification_date'] = opts[:'modification_date'] if !opts[:'modification_date'].nil?
      query_params[:'access_date'] = opts[:'access_date'] if !opts[:'access_date'].nil?
      query_params[:'gid'] = opts[:'gid'] if !opts[:'gid'].nil?
      query_params[:'uid'] = opts[:'uid'] if !opts[:'uid'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'NodeumFileCollection' 

      # auth_names
      auth_names = opts[:auth_names] || ['BasicAuth', 'BearerAuth']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: FilesApi#files_children_by_task_execution_by_task\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Lists files under a specific folder on tape of pools, specific for Data Exchange.
    # **API Key Scope**: import_files / index
    # @param pool_id [String] Numeric ID, or name of pool.
    # @param file_parent_id [Integer] Numeric ID of parent folder.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :limit The number of items to display for pagination.
    # @option opts [Integer] :offset The number of items to skip for pagination.
    # @option opts [String] :file_id Filter on file id
    # @option opts [String] :name Filter on name
    # @option opts [String] :type Filter on type
    # @option opts [String] :permission Filter on permission
    # @option opts [String] :size Filter on size
    # @option opts [String] :change_date Filter on change date
    # @option opts [String] :modification_date Filter on modification date
    # @option opts [String] :access_date Filter on access date
    # @option opts [String] :gid Filter on gid
    # @option opts [String] :uid Filter on uid
    # @return [ImportFileCollection]
    def import_files_children_by_pool(pool_id, file_parent_id, opts = {})
      data, _status_code, _headers = import_files_children_by_pool_with_http_info(pool_id, file_parent_id, opts)
      data
    end

    # Lists files under a specific folder on tape of pools, specific for Data Exchange.
    # **API Key Scope**: import_files / index
    # @param pool_id [String] Numeric ID, or name of pool.
    # @param file_parent_id [Integer] Numeric ID of parent folder.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :limit The number of items to display for pagination.
    # @option opts [Integer] :offset The number of items to skip for pagination.
    # @option opts [String] :file_id Filter on file id
    # @option opts [String] :name Filter on name
    # @option opts [String] :type Filter on type
    # @option opts [String] :permission Filter on permission
    # @option opts [String] :size Filter on size
    # @option opts [String] :change_date Filter on change date
    # @option opts [String] :modification_date Filter on modification date
    # @option opts [String] :access_date Filter on access date
    # @option opts [String] :gid Filter on gid
    # @option opts [String] :uid Filter on uid
    # @return [Array<(ImportFileCollection, Integer, Hash)>] ImportFileCollection data, response status code and response headers
    def import_files_children_by_pool_with_http_info(pool_id, file_parent_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: FilesApi.import_files_children_by_pool ...'
      end
      # verify the required parameter 'pool_id' is set
      if @api_client.config.client_side_validation && pool_id.nil?
        fail ArgumentError, "Missing the required parameter 'pool_id' when calling FilesApi.import_files_children_by_pool"
      end
      # verify the required parameter 'file_parent_id' is set
      if @api_client.config.client_side_validation && file_parent_id.nil?
        fail ArgumentError, "Missing the required parameter 'file_parent_id' when calling FilesApi.import_files_children_by_pool"
      end
      # resource path
      local_var_path = '/pools/{pool_id}/import_files/{file_parent_id}/children'.sub('{' + 'pool_id' + '}', CGI.escape(pool_id.to_s)).sub('{' + 'file_parent_id' + '}', CGI.escape(file_parent_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?
      query_params[:'file_id'] = opts[:'file_id'] if !opts[:'file_id'].nil?
      query_params[:'name'] = opts[:'name'] if !opts[:'name'].nil?
      query_params[:'type'] = opts[:'type'] if !opts[:'type'].nil?
      query_params[:'permission'] = opts[:'permission'] if !opts[:'permission'].nil?
      query_params[:'size'] = opts[:'size'] if !opts[:'size'].nil?
      query_params[:'change_date'] = opts[:'change_date'] if !opts[:'change_date'].nil?
      query_params[:'modification_date'] = opts[:'modification_date'] if !opts[:'modification_date'].nil?
      query_params[:'access_date'] = opts[:'access_date'] if !opts[:'access_date'].nil?
      query_params[:'gid'] = opts[:'gid'] if !opts[:'gid'].nil?
      query_params[:'uid'] = opts[:'uid'] if !opts[:'uid'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'ImportFileCollection' 

      # auth_names
      auth_names = opts[:auth_names] || ['BasicAuth', 'BearerAuth']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: FilesApi#import_files_children_by_pool\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Lists files on root.
    # **API Key Scope**: files / index
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :limit The number of items to display for pagination.
    # @option opts [Integer] :offset The number of items to skip for pagination.
    # @option opts [String] :file_id Filter on file id
    # @option opts [String] :name Filter on name
    # @option opts [String] :type Filter on type
    # @option opts [String] :permission Filter on permission
    # @option opts [String] :size Filter on size
    # @option opts [String] :change_date Filter on change date
    # @option opts [String] :modification_date Filter on modification date
    # @option opts [String] :access_date Filter on access date
    # @option opts [String] :gid Filter on gid
    # @option opts [String] :uid Filter on uid
    # @return [NodeumFileCollection]
    def index_files(opts = {})
      data, _status_code, _headers = index_files_with_http_info(opts)
      data
    end

    # Lists files on root.
    # **API Key Scope**: files / index
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :limit The number of items to display for pagination.
    # @option opts [Integer] :offset The number of items to skip for pagination.
    # @option opts [String] :file_id Filter on file id
    # @option opts [String] :name Filter on name
    # @option opts [String] :type Filter on type
    # @option opts [String] :permission Filter on permission
    # @option opts [String] :size Filter on size
    # @option opts [String] :change_date Filter on change date
    # @option opts [String] :modification_date Filter on modification date
    # @option opts [String] :access_date Filter on access date
    # @option opts [String] :gid Filter on gid
    # @option opts [String] :uid Filter on uid
    # @return [Array<(NodeumFileCollection, Integer, Hash)>] NodeumFileCollection data, response status code and response headers
    def index_files_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: FilesApi.index_files ...'
      end
      # resource path
      local_var_path = '/files'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?
      query_params[:'file_id'] = opts[:'file_id'] if !opts[:'file_id'].nil?
      query_params[:'name'] = opts[:'name'] if !opts[:'name'].nil?
      query_params[:'type'] = opts[:'type'] if !opts[:'type'].nil?
      query_params[:'permission'] = opts[:'permission'] if !opts[:'permission'].nil?
      query_params[:'size'] = opts[:'size'] if !opts[:'size'].nil?
      query_params[:'change_date'] = opts[:'change_date'] if !opts[:'change_date'].nil?
      query_params[:'modification_date'] = opts[:'modification_date'] if !opts[:'modification_date'].nil?
      query_params[:'access_date'] = opts[:'access_date'] if !opts[:'access_date'].nil?
      query_params[:'gid'] = opts[:'gid'] if !opts[:'gid'].nil?
      query_params[:'uid'] = opts[:'uid'] if !opts[:'uid'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'NodeumFileCollection' 

      # auth_names
      auth_names = opts[:auth_names] || ['BasicAuth', 'BearerAuth']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: FilesApi#index_files\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Lists files on root.
    # **API Key Scope**: files / index
    # @param container_id [String] Numeric ID or name of container.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :limit The number of items to display for pagination.
    # @option opts [Integer] :offset The number of items to skip for pagination.
    # @option opts [String] :file_id Filter on file id
    # @option opts [String] :name Filter on name
    # @option opts [String] :type Filter on type
    # @option opts [String] :permission Filter on permission
    # @option opts [String] :size Filter on size
    # @option opts [String] :change_date Filter on change date
    # @option opts [String] :modification_date Filter on modification date
    # @option opts [String] :access_date Filter on access date
    # @option opts [String] :gid Filter on gid
    # @option opts [String] :uid Filter on uid
    # @return [NodeumFileCollection]
    def index_files_by_container(container_id, opts = {})
      data, _status_code, _headers = index_files_by_container_with_http_info(container_id, opts)
      data
    end

    # Lists files on root.
    # **API Key Scope**: files / index
    # @param container_id [String] Numeric ID or name of container.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :limit The number of items to display for pagination.
    # @option opts [Integer] :offset The number of items to skip for pagination.
    # @option opts [String] :file_id Filter on file id
    # @option opts [String] :name Filter on name
    # @option opts [String] :type Filter on type
    # @option opts [String] :permission Filter on permission
    # @option opts [String] :size Filter on size
    # @option opts [String] :change_date Filter on change date
    # @option opts [String] :modification_date Filter on modification date
    # @option opts [String] :access_date Filter on access date
    # @option opts [String] :gid Filter on gid
    # @option opts [String] :uid Filter on uid
    # @return [Array<(NodeumFileCollection, Integer, Hash)>] NodeumFileCollection data, response status code and response headers
    def index_files_by_container_with_http_info(container_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: FilesApi.index_files_by_container ...'
      end
      # verify the required parameter 'container_id' is set
      if @api_client.config.client_side_validation && container_id.nil?
        fail ArgumentError, "Missing the required parameter 'container_id' when calling FilesApi.index_files_by_container"
      end
      # resource path
      local_var_path = '/containers/{container_id}/files'.sub('{' + 'container_id' + '}', CGI.escape(container_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?
      query_params[:'file_id'] = opts[:'file_id'] if !opts[:'file_id'].nil?
      query_params[:'name'] = opts[:'name'] if !opts[:'name'].nil?
      query_params[:'type'] = opts[:'type'] if !opts[:'type'].nil?
      query_params[:'permission'] = opts[:'permission'] if !opts[:'permission'].nil?
      query_params[:'size'] = opts[:'size'] if !opts[:'size'].nil?
      query_params[:'change_date'] = opts[:'change_date'] if !opts[:'change_date'].nil?
      query_params[:'modification_date'] = opts[:'modification_date'] if !opts[:'modification_date'].nil?
      query_params[:'access_date'] = opts[:'access_date'] if !opts[:'access_date'].nil?
      query_params[:'gid'] = opts[:'gid'] if !opts[:'gid'].nil?
      query_params[:'uid'] = opts[:'uid'] if !opts[:'uid'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'NodeumFileCollection' 

      # auth_names
      auth_names = opts[:auth_names] || ['BasicAuth', 'BearerAuth']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: FilesApi#index_files_by_container\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Lists files on root.
    # **API Key Scope**: files / index
    # @param pool_id [String] Numeric ID, or name of pool.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :limit The number of items to display for pagination.
    # @option opts [Integer] :offset The number of items to skip for pagination.
    # @option opts [String] :file_id Filter on file id
    # @option opts [String] :name Filter on name
    # @option opts [String] :type Filter on type
    # @option opts [String] :permission Filter on permission
    # @option opts [String] :size Filter on size
    # @option opts [String] :change_date Filter on change date
    # @option opts [String] :modification_date Filter on modification date
    # @option opts [String] :access_date Filter on access date
    # @option opts [String] :gid Filter on gid
    # @option opts [String] :uid Filter on uid
    # @return [NodeumFileCollection]
    def index_files_by_pool(pool_id, opts = {})
      data, _status_code, _headers = index_files_by_pool_with_http_info(pool_id, opts)
      data
    end

    # Lists files on root.
    # **API Key Scope**: files / index
    # @param pool_id [String] Numeric ID, or name of pool.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :limit The number of items to display for pagination.
    # @option opts [Integer] :offset The number of items to skip for pagination.
    # @option opts [String] :file_id Filter on file id
    # @option opts [String] :name Filter on name
    # @option opts [String] :type Filter on type
    # @option opts [String] :permission Filter on permission
    # @option opts [String] :size Filter on size
    # @option opts [String] :change_date Filter on change date
    # @option opts [String] :modification_date Filter on modification date
    # @option opts [String] :access_date Filter on access date
    # @option opts [String] :gid Filter on gid
    # @option opts [String] :uid Filter on uid
    # @return [Array<(NodeumFileCollection, Integer, Hash)>] NodeumFileCollection data, response status code and response headers
    def index_files_by_pool_with_http_info(pool_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: FilesApi.index_files_by_pool ...'
      end
      # verify the required parameter 'pool_id' is set
      if @api_client.config.client_side_validation && pool_id.nil?
        fail ArgumentError, "Missing the required parameter 'pool_id' when calling FilesApi.index_files_by_pool"
      end
      # resource path
      local_var_path = '/pools/{pool_id}/files'.sub('{' + 'pool_id' + '}', CGI.escape(pool_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?
      query_params[:'file_id'] = opts[:'file_id'] if !opts[:'file_id'].nil?
      query_params[:'name'] = opts[:'name'] if !opts[:'name'].nil?
      query_params[:'type'] = opts[:'type'] if !opts[:'type'].nil?
      query_params[:'permission'] = opts[:'permission'] if !opts[:'permission'].nil?
      query_params[:'size'] = opts[:'size'] if !opts[:'size'].nil?
      query_params[:'change_date'] = opts[:'change_date'] if !opts[:'change_date'].nil?
      query_params[:'modification_date'] = opts[:'modification_date'] if !opts[:'modification_date'].nil?
      query_params[:'access_date'] = opts[:'access_date'] if !opts[:'access_date'].nil?
      query_params[:'gid'] = opts[:'gid'] if !opts[:'gid'].nil?
      query_params[:'uid'] = opts[:'uid'] if !opts[:'uid'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'NodeumFileCollection' 

      # auth_names
      auth_names = opts[:auth_names] || ['BasicAuth', 'BearerAuth']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: FilesApi#index_files_by_pool\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Lists files on root.
    # **API Key Scope**: files / index
    # @param task_id [String] Numeric ID or name of task. Task names are not unique, it&#39;s recommanded to use numeric ID.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :limit The number of items to display for pagination.
    # @option opts [Integer] :offset The number of items to skip for pagination.
    # @option opts [String] :file_id Filter on file id
    # @option opts [String] :name Filter on name
    # @option opts [String] :type Filter on type
    # @option opts [String] :permission Filter on permission
    # @option opts [String] :size Filter on size
    # @option opts [String] :change_date Filter on change date
    # @option opts [String] :modification_date Filter on modification date
    # @option opts [String] :access_date Filter on access date
    # @option opts [String] :gid Filter on gid
    # @option opts [String] :uid Filter on uid
    # @return [NodeumFileCollection]
    def index_files_by_task(task_id, opts = {})
      data, _status_code, _headers = index_files_by_task_with_http_info(task_id, opts)
      data
    end

    # Lists files on root.
    # **API Key Scope**: files / index
    # @param task_id [String] Numeric ID or name of task. Task names are not unique, it&#39;s recommanded to use numeric ID.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :limit The number of items to display for pagination.
    # @option opts [Integer] :offset The number of items to skip for pagination.
    # @option opts [String] :file_id Filter on file id
    # @option opts [String] :name Filter on name
    # @option opts [String] :type Filter on type
    # @option opts [String] :permission Filter on permission
    # @option opts [String] :size Filter on size
    # @option opts [String] :change_date Filter on change date
    # @option opts [String] :modification_date Filter on modification date
    # @option opts [String] :access_date Filter on access date
    # @option opts [String] :gid Filter on gid
    # @option opts [String] :uid Filter on uid
    # @return [Array<(NodeumFileCollection, Integer, Hash)>] NodeumFileCollection data, response status code and response headers
    def index_files_by_task_with_http_info(task_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: FilesApi.index_files_by_task ...'
      end
      # verify the required parameter 'task_id' is set
      if @api_client.config.client_side_validation && task_id.nil?
        fail ArgumentError, "Missing the required parameter 'task_id' when calling FilesApi.index_files_by_task"
      end
      # resource path
      local_var_path = '/tasks/{task_id}/files'.sub('{' + 'task_id' + '}', CGI.escape(task_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?
      query_params[:'file_id'] = opts[:'file_id'] if !opts[:'file_id'].nil?
      query_params[:'name'] = opts[:'name'] if !opts[:'name'].nil?
      query_params[:'type'] = opts[:'type'] if !opts[:'type'].nil?
      query_params[:'permission'] = opts[:'permission'] if !opts[:'permission'].nil?
      query_params[:'size'] = opts[:'size'] if !opts[:'size'].nil?
      query_params[:'change_date'] = opts[:'change_date'] if !opts[:'change_date'].nil?
      query_params[:'modification_date'] = opts[:'modification_date'] if !opts[:'modification_date'].nil?
      query_params[:'access_date'] = opts[:'access_date'] if !opts[:'access_date'].nil?
      query_params[:'gid'] = opts[:'gid'] if !opts[:'gid'].nil?
      query_params[:'uid'] = opts[:'uid'] if !opts[:'uid'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'NodeumFileCollection' 

      # auth_names
      auth_names = opts[:auth_names] || ['BasicAuth', 'BearerAuth']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: FilesApi#index_files_by_task\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Lists files on root.
    # **API Key Scope**: files / index
    # @param task_execution_id [String] Numeric ID of task execution.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :limit The number of items to display for pagination.
    # @option opts [Integer] :offset The number of items to skip for pagination.
    # @option opts [String] :file_id Filter on file id
    # @option opts [String] :name Filter on name
    # @option opts [String] :type Filter on type
    # @option opts [String] :permission Filter on permission
    # @option opts [String] :size Filter on size
    # @option opts [String] :change_date Filter on change date
    # @option opts [String] :modification_date Filter on modification date
    # @option opts [String] :access_date Filter on access date
    # @option opts [String] :gid Filter on gid
    # @option opts [String] :uid Filter on uid
    # @return [NodeumFileCollection]
    def index_files_by_task_execution(task_execution_id, opts = {})
      data, _status_code, _headers = index_files_by_task_execution_with_http_info(task_execution_id, opts)
      data
    end

    # Lists files on root.
    # **API Key Scope**: files / index
    # @param task_execution_id [String] Numeric ID of task execution.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :limit The number of items to display for pagination.
    # @option opts [Integer] :offset The number of items to skip for pagination.
    # @option opts [String] :file_id Filter on file id
    # @option opts [String] :name Filter on name
    # @option opts [String] :type Filter on type
    # @option opts [String] :permission Filter on permission
    # @option opts [String] :size Filter on size
    # @option opts [String] :change_date Filter on change date
    # @option opts [String] :modification_date Filter on modification date
    # @option opts [String] :access_date Filter on access date
    # @option opts [String] :gid Filter on gid
    # @option opts [String] :uid Filter on uid
    # @return [Array<(NodeumFileCollection, Integer, Hash)>] NodeumFileCollection data, response status code and response headers
    def index_files_by_task_execution_with_http_info(task_execution_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: FilesApi.index_files_by_task_execution ...'
      end
      # verify the required parameter 'task_execution_id' is set
      if @api_client.config.client_side_validation && task_execution_id.nil?
        fail ArgumentError, "Missing the required parameter 'task_execution_id' when calling FilesApi.index_files_by_task_execution"
      end
      # resource path
      local_var_path = '/task_executions/{task_execution_id}/files'.sub('{' + 'task_execution_id' + '}', CGI.escape(task_execution_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?
      query_params[:'file_id'] = opts[:'file_id'] if !opts[:'file_id'].nil?
      query_params[:'name'] = opts[:'name'] if !opts[:'name'].nil?
      query_params[:'type'] = opts[:'type'] if !opts[:'type'].nil?
      query_params[:'permission'] = opts[:'permission'] if !opts[:'permission'].nil?
      query_params[:'size'] = opts[:'size'] if !opts[:'size'].nil?
      query_params[:'change_date'] = opts[:'change_date'] if !opts[:'change_date'].nil?
      query_params[:'modification_date'] = opts[:'modification_date'] if !opts[:'modification_date'].nil?
      query_params[:'access_date'] = opts[:'access_date'] if !opts[:'access_date'].nil?
      query_params[:'gid'] = opts[:'gid'] if !opts[:'gid'].nil?
      query_params[:'uid'] = opts[:'uid'] if !opts[:'uid'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'NodeumFileCollection' 

      # auth_names
      auth_names = opts[:auth_names] || ['BasicAuth', 'BearerAuth']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: FilesApi#index_files_by_task_execution\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Lists files on root.
    # **API Key Scope**: files / index
    # @param task_id [String] Numeric ID or name of task. Task names are not unique, it&#39;s recommanded to use numeric ID.
    # @param task_execution_id [String] Numeric ID of task execution.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :limit The number of items to display for pagination.
    # @option opts [Integer] :offset The number of items to skip for pagination.
    # @option opts [String] :file_id Filter on file id
    # @option opts [String] :name Filter on name
    # @option opts [String] :type Filter on type
    # @option opts [String] :permission Filter on permission
    # @option opts [String] :size Filter on size
    # @option opts [String] :change_date Filter on change date
    # @option opts [String] :modification_date Filter on modification date
    # @option opts [String] :access_date Filter on access date
    # @option opts [String] :gid Filter on gid
    # @option opts [String] :uid Filter on uid
    # @return [NodeumFileCollection]
    def index_files_by_task_execution_by_task(task_id, task_execution_id, opts = {})
      data, _status_code, _headers = index_files_by_task_execution_by_task_with_http_info(task_id, task_execution_id, opts)
      data
    end

    # Lists files on root.
    # **API Key Scope**: files / index
    # @param task_id [String] Numeric ID or name of task. Task names are not unique, it&#39;s recommanded to use numeric ID.
    # @param task_execution_id [String] Numeric ID of task execution.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :limit The number of items to display for pagination.
    # @option opts [Integer] :offset The number of items to skip for pagination.
    # @option opts [String] :file_id Filter on file id
    # @option opts [String] :name Filter on name
    # @option opts [String] :type Filter on type
    # @option opts [String] :permission Filter on permission
    # @option opts [String] :size Filter on size
    # @option opts [String] :change_date Filter on change date
    # @option opts [String] :modification_date Filter on modification date
    # @option opts [String] :access_date Filter on access date
    # @option opts [String] :gid Filter on gid
    # @option opts [String] :uid Filter on uid
    # @return [Array<(NodeumFileCollection, Integer, Hash)>] NodeumFileCollection data, response status code and response headers
    def index_files_by_task_execution_by_task_with_http_info(task_id, task_execution_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: FilesApi.index_files_by_task_execution_by_task ...'
      end
      # verify the required parameter 'task_id' is set
      if @api_client.config.client_side_validation && task_id.nil?
        fail ArgumentError, "Missing the required parameter 'task_id' when calling FilesApi.index_files_by_task_execution_by_task"
      end
      # verify the required parameter 'task_execution_id' is set
      if @api_client.config.client_side_validation && task_execution_id.nil?
        fail ArgumentError, "Missing the required parameter 'task_execution_id' when calling FilesApi.index_files_by_task_execution_by_task"
      end
      # resource path
      local_var_path = '/tasks/{task_id}/task_executions/{task_execution_id}/files'.sub('{' + 'task_id' + '}', CGI.escape(task_id.to_s)).sub('{' + 'task_execution_id' + '}', CGI.escape(task_execution_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?
      query_params[:'file_id'] = opts[:'file_id'] if !opts[:'file_id'].nil?
      query_params[:'name'] = opts[:'name'] if !opts[:'name'].nil?
      query_params[:'type'] = opts[:'type'] if !opts[:'type'].nil?
      query_params[:'permission'] = opts[:'permission'] if !opts[:'permission'].nil?
      query_params[:'size'] = opts[:'size'] if !opts[:'size'].nil?
      query_params[:'change_date'] = opts[:'change_date'] if !opts[:'change_date'].nil?
      query_params[:'modification_date'] = opts[:'modification_date'] if !opts[:'modification_date'].nil?
      query_params[:'access_date'] = opts[:'access_date'] if !opts[:'access_date'].nil?
      query_params[:'gid'] = opts[:'gid'] if !opts[:'gid'].nil?
      query_params[:'uid'] = opts[:'uid'] if !opts[:'uid'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'NodeumFileCollection' 

      # auth_names
      auth_names = opts[:auth_names] || ['BasicAuth', 'BearerAuth']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: FilesApi#index_files_by_task_execution_by_task\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Lists files on root of tape of pools, specific for Data Exchange.
    # **API Key Scope**: import_files / index
    # @param pool_id [String] Numeric ID, or name of pool.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :limit The number of items to display for pagination.
    # @option opts [Integer] :offset The number of items to skip for pagination.
    # @option opts [String] :file_id Filter on file id
    # @option opts [String] :name Filter on name
    # @option opts [String] :type Filter on type
    # @option opts [String] :permission Filter on permission
    # @option opts [String] :size Filter on size
    # @option opts [String] :change_date Filter on change date
    # @option opts [String] :modification_date Filter on modification date
    # @option opts [String] :access_date Filter on access date
    # @option opts [String] :gid Filter on gid
    # @option opts [String] :uid Filter on uid
    # @return [ImportFileCollection]
    def index_import_files_by_pool(pool_id, opts = {})
      data, _status_code, _headers = index_import_files_by_pool_with_http_info(pool_id, opts)
      data
    end

    # Lists files on root of tape of pools, specific for Data Exchange.
    # **API Key Scope**: import_files / index
    # @param pool_id [String] Numeric ID, or name of pool.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :limit The number of items to display for pagination.
    # @option opts [Integer] :offset The number of items to skip for pagination.
    # @option opts [String] :file_id Filter on file id
    # @option opts [String] :name Filter on name
    # @option opts [String] :type Filter on type
    # @option opts [String] :permission Filter on permission
    # @option opts [String] :size Filter on size
    # @option opts [String] :change_date Filter on change date
    # @option opts [String] :modification_date Filter on modification date
    # @option opts [String] :access_date Filter on access date
    # @option opts [String] :gid Filter on gid
    # @option opts [String] :uid Filter on uid
    # @return [Array<(ImportFileCollection, Integer, Hash)>] ImportFileCollection data, response status code and response headers
    def index_import_files_by_pool_with_http_info(pool_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: FilesApi.index_import_files_by_pool ...'
      end
      # verify the required parameter 'pool_id' is set
      if @api_client.config.client_side_validation && pool_id.nil?
        fail ArgumentError, "Missing the required parameter 'pool_id' when calling FilesApi.index_import_files_by_pool"
      end
      # resource path
      local_var_path = '/pools/{pool_id}/import_files'.sub('{' + 'pool_id' + '}', CGI.escape(pool_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?
      query_params[:'file_id'] = opts[:'file_id'] if !opts[:'file_id'].nil?
      query_params[:'name'] = opts[:'name'] if !opts[:'name'].nil?
      query_params[:'type'] = opts[:'type'] if !opts[:'type'].nil?
      query_params[:'permission'] = opts[:'permission'] if !opts[:'permission'].nil?
      query_params[:'size'] = opts[:'size'] if !opts[:'size'].nil?
      query_params[:'change_date'] = opts[:'change_date'] if !opts[:'change_date'].nil?
      query_params[:'modification_date'] = opts[:'modification_date'] if !opts[:'modification_date'].nil?
      query_params[:'access_date'] = opts[:'access_date'] if !opts[:'access_date'].nil?
      query_params[:'gid'] = opts[:'gid'] if !opts[:'gid'].nil?
      query_params[:'uid'] = opts[:'uid'] if !opts[:'uid'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'ImportFileCollection' 

      # auth_names
      auth_names = opts[:auth_names] || ['BasicAuth', 'BearerAuth']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: FilesApi#index_import_files_by_pool\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Lists files on root of tape of pools, specific for Active and Offline.
    # **API Key Scope**: on_tapes_files / index
    # @param pool_id [String] Numeric ID, or name of pool.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :limit The number of items to display for pagination.
    # @option opts [Integer] :offset The number of items to skip for pagination.
    # @option opts [String] :name Filter on name
    # @option opts [String] :type Filter on type
    # @option opts [String] :size Filter on size
    # @return [OnTapesFileCollection]
    def index_on_tapes_files_by_pool(pool_id, opts = {})
      data, _status_code, _headers = index_on_tapes_files_by_pool_with_http_info(pool_id, opts)
      data
    end

    # Lists files on root of tape of pools, specific for Active and Offline.
    # **API Key Scope**: on_tapes_files / index
    # @param pool_id [String] Numeric ID, or name of pool.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :limit The number of items to display for pagination.
    # @option opts [Integer] :offset The number of items to skip for pagination.
    # @option opts [String] :name Filter on name
    # @option opts [String] :type Filter on type
    # @option opts [String] :size Filter on size
    # @return [Array<(OnTapesFileCollection, Integer, Hash)>] OnTapesFileCollection data, response status code and response headers
    def index_on_tapes_files_by_pool_with_http_info(pool_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: FilesApi.index_on_tapes_files_by_pool ...'
      end
      # verify the required parameter 'pool_id' is set
      if @api_client.config.client_side_validation && pool_id.nil?
        fail ArgumentError, "Missing the required parameter 'pool_id' when calling FilesApi.index_on_tapes_files_by_pool"
      end
      # resource path
      local_var_path = '/pools/{pool_id}/on_tapes_files'.sub('{' + 'pool_id' + '}', CGI.escape(pool_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?
      query_params[:'name'] = opts[:'name'] if !opts[:'name'].nil?
      query_params[:'type'] = opts[:'type'] if !opts[:'type'].nil?
      query_params[:'size'] = opts[:'size'] if !opts[:'size'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'OnTapesFileCollection' 

      # auth_names
      auth_names = opts[:auth_names] || ['BasicAuth', 'BearerAuth']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: FilesApi#index_on_tapes_files_by_pool\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Displays tapes containing specific file, related to the specific pool.
    # **API Key Scope**: files / tapes
    # @param pool_id [String] Numeric ID, or name of pool.
    # @param file_id [Integer] Numeric ID of file.
    # @param [Hash] opts the optional parameters
    # @return [TapeCollection]
    def index_tapes_by_file_by_pool(pool_id, file_id, opts = {})
      data, _status_code, _headers = index_tapes_by_file_by_pool_with_http_info(pool_id, file_id, opts)
      data
    end

    # Displays tapes containing specific file, related to the specific pool.
    # **API Key Scope**: files / tapes
    # @param pool_id [String] Numeric ID, or name of pool.
    # @param file_id [Integer] Numeric ID of file.
    # @param [Hash] opts the optional parameters
    # @return [Array<(TapeCollection, Integer, Hash)>] TapeCollection data, response status code and response headers
    def index_tapes_by_file_by_pool_with_http_info(pool_id, file_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: FilesApi.index_tapes_by_file_by_pool ...'
      end
      # verify the required parameter 'pool_id' is set
      if @api_client.config.client_side_validation && pool_id.nil?
        fail ArgumentError, "Missing the required parameter 'pool_id' when calling FilesApi.index_tapes_by_file_by_pool"
      end
      # verify the required parameter 'file_id' is set
      if @api_client.config.client_side_validation && file_id.nil?
        fail ArgumentError, "Missing the required parameter 'file_id' when calling FilesApi.index_tapes_by_file_by_pool"
      end
      # resource path
      local_var_path = '/pools/{pool_id}/files/{file_id}/tapes'.sub('{' + 'pool_id' + '}', CGI.escape(pool_id.to_s)).sub('{' + 'file_id' + '}', CGI.escape(file_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'TapeCollection' 

      # auth_names
      auth_names = opts[:auth_names] || ['BasicAuth', 'BearerAuth']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: FilesApi#index_tapes_by_file_by_pool\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Displays tapes containing specific file, related to the specific task.
    # **API Key Scope**: files / tapes
    # @param task_id [String] Numeric ID or name of task. Task names are not unique, it&#39;s recommanded to use numeric ID.
    # @param file_id [Integer] Numeric ID of file.
    # @param [Hash] opts the optional parameters
    # @return [TapeCollection]
    def index_tapes_by_file_by_task(task_id, file_id, opts = {})
      data, _status_code, _headers = index_tapes_by_file_by_task_with_http_info(task_id, file_id, opts)
      data
    end

    # Displays tapes containing specific file, related to the specific task.
    # **API Key Scope**: files / tapes
    # @param task_id [String] Numeric ID or name of task. Task names are not unique, it&#39;s recommanded to use numeric ID.
    # @param file_id [Integer] Numeric ID of file.
    # @param [Hash] opts the optional parameters
    # @return [Array<(TapeCollection, Integer, Hash)>] TapeCollection data, response status code and response headers
    def index_tapes_by_file_by_task_with_http_info(task_id, file_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: FilesApi.index_tapes_by_file_by_task ...'
      end
      # verify the required parameter 'task_id' is set
      if @api_client.config.client_side_validation && task_id.nil?
        fail ArgumentError, "Missing the required parameter 'task_id' when calling FilesApi.index_tapes_by_file_by_task"
      end
      # verify the required parameter 'file_id' is set
      if @api_client.config.client_side_validation && file_id.nil?
        fail ArgumentError, "Missing the required parameter 'file_id' when calling FilesApi.index_tapes_by_file_by_task"
      end
      # resource path
      local_var_path = '/tasks/{task_id}/files/{file_id}/tapes'.sub('{' + 'task_id' + '}', CGI.escape(task_id.to_s)).sub('{' + 'file_id' + '}', CGI.escape(file_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'TapeCollection' 

      # auth_names
      auth_names = opts[:auth_names] || ['BasicAuth', 'BearerAuth']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: FilesApi#index_tapes_by_file_by_task\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Displays tapes containing specific file, related to the specific task.
    # **API Key Scope**: files / tapes
    # @param task_execution_id [String] Numeric ID of task execution.
    # @param file_id [Integer] Numeric ID of file.
    # @param [Hash] opts the optional parameters
    # @return [TapeCollection]
    def index_tapes_by_file_by_task_execution(task_execution_id, file_id, opts = {})
      data, _status_code, _headers = index_tapes_by_file_by_task_execution_with_http_info(task_execution_id, file_id, opts)
      data
    end

    # Displays tapes containing specific file, related to the specific task.
    # **API Key Scope**: files / tapes
    # @param task_execution_id [String] Numeric ID of task execution.
    # @param file_id [Integer] Numeric ID of file.
    # @param [Hash] opts the optional parameters
    # @return [Array<(TapeCollection, Integer, Hash)>] TapeCollection data, response status code and response headers
    def index_tapes_by_file_by_task_execution_with_http_info(task_execution_id, file_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: FilesApi.index_tapes_by_file_by_task_execution ...'
      end
      # verify the required parameter 'task_execution_id' is set
      if @api_client.config.client_side_validation && task_execution_id.nil?
        fail ArgumentError, "Missing the required parameter 'task_execution_id' when calling FilesApi.index_tapes_by_file_by_task_execution"
      end
      # verify the required parameter 'file_id' is set
      if @api_client.config.client_side_validation && file_id.nil?
        fail ArgumentError, "Missing the required parameter 'file_id' when calling FilesApi.index_tapes_by_file_by_task_execution"
      end
      # resource path
      local_var_path = '/task_executions/{task_execution_id}/files/{file_id}/tapes'.sub('{' + 'task_execution_id' + '}', CGI.escape(task_execution_id.to_s)).sub('{' + 'file_id' + '}', CGI.escape(file_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'TapeCollection' 

      # auth_names
      auth_names = opts[:auth_names] || ['BasicAuth', 'BearerAuth']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: FilesApi#index_tapes_by_file_by_task_execution\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Displays tapes containing specific file, related to the specific task.
    # **API Key Scope**: files / tapes
    # @param task_id [String] Numeric ID or name of task. Task names are not unique, it&#39;s recommanded to use numeric ID.
    # @param task_execution_id [String] Numeric ID of task execution.
    # @param file_id [Integer] Numeric ID of file.
    # @param [Hash] opts the optional parameters
    # @return [TapeCollection]
    def index_tapes_by_file_by_task_execution_by_task(task_id, task_execution_id, file_id, opts = {})
      data, _status_code, _headers = index_tapes_by_file_by_task_execution_by_task_with_http_info(task_id, task_execution_id, file_id, opts)
      data
    end

    # Displays tapes containing specific file, related to the specific task.
    # **API Key Scope**: files / tapes
    # @param task_id [String] Numeric ID or name of task. Task names are not unique, it&#39;s recommanded to use numeric ID.
    # @param task_execution_id [String] Numeric ID of task execution.
    # @param file_id [Integer] Numeric ID of file.
    # @param [Hash] opts the optional parameters
    # @return [Array<(TapeCollection, Integer, Hash)>] TapeCollection data, response status code and response headers
    def index_tapes_by_file_by_task_execution_by_task_with_http_info(task_id, task_execution_id, file_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: FilesApi.index_tapes_by_file_by_task_execution_by_task ...'
      end
      # verify the required parameter 'task_id' is set
      if @api_client.config.client_side_validation && task_id.nil?
        fail ArgumentError, "Missing the required parameter 'task_id' when calling FilesApi.index_tapes_by_file_by_task_execution_by_task"
      end
      # verify the required parameter 'task_execution_id' is set
      if @api_client.config.client_side_validation && task_execution_id.nil?
        fail ArgumentError, "Missing the required parameter 'task_execution_id' when calling FilesApi.index_tapes_by_file_by_task_execution_by_task"
      end
      # verify the required parameter 'file_id' is set
      if @api_client.config.client_side_validation && file_id.nil?
        fail ArgumentError, "Missing the required parameter 'file_id' when calling FilesApi.index_tapes_by_file_by_task_execution_by_task"
      end
      # resource path
      local_var_path = '/tasks/{task_id}/task_executions/{task_execution_id}/files/{file_id}/tapes'.sub('{' + 'task_id' + '}', CGI.escape(task_id.to_s)).sub('{' + 'task_execution_id' + '}', CGI.escape(task_execution_id.to_s)).sub('{' + 'file_id' + '}', CGI.escape(file_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'TapeCollection' 

      # auth_names
      auth_names = opts[:auth_names] || ['BasicAuth', 'BearerAuth']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: FilesApi#index_tapes_by_file_by_task_execution_by_task\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Lists files under a specific folder on tape of pools, specific for Active and Offline.
    # **API Key Scope**: on_tapes_files / index
    # @param pool_id [String] Numeric ID, or name of pool.
    # @param file_parent_id [Integer] Numeric ID of parent folder.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :limit The number of items to display for pagination.
    # @option opts [Integer] :offset The number of items to skip for pagination.
    # @option opts [String] :name Filter on name
    # @option opts [String] :type Filter on type
    # @option opts [String] :size Filter on size
    # @return [OnTapesFileCollection]
    def on_tapes_files_children_by_pool(pool_id, file_parent_id, opts = {})
      data, _status_code, _headers = on_tapes_files_children_by_pool_with_http_info(pool_id, file_parent_id, opts)
      data
    end

    # Lists files under a specific folder on tape of pools, specific for Active and Offline.
    # **API Key Scope**: on_tapes_files / index
    # @param pool_id [String] Numeric ID, or name of pool.
    # @param file_parent_id [Integer] Numeric ID of parent folder.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :limit The number of items to display for pagination.
    # @option opts [Integer] :offset The number of items to skip for pagination.
    # @option opts [String] :name Filter on name
    # @option opts [String] :type Filter on type
    # @option opts [String] :size Filter on size
    # @return [Array<(OnTapesFileCollection, Integer, Hash)>] OnTapesFileCollection data, response status code and response headers
    def on_tapes_files_children_by_pool_with_http_info(pool_id, file_parent_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: FilesApi.on_tapes_files_children_by_pool ...'
      end
      # verify the required parameter 'pool_id' is set
      if @api_client.config.client_side_validation && pool_id.nil?
        fail ArgumentError, "Missing the required parameter 'pool_id' when calling FilesApi.on_tapes_files_children_by_pool"
      end
      # verify the required parameter 'file_parent_id' is set
      if @api_client.config.client_side_validation && file_parent_id.nil?
        fail ArgumentError, "Missing the required parameter 'file_parent_id' when calling FilesApi.on_tapes_files_children_by_pool"
      end
      # resource path
      local_var_path = '/pools/{pool_id}/on_tapes_files/{file_parent_id}/children'.sub('{' + 'pool_id' + '}', CGI.escape(pool_id.to_s)).sub('{' + 'file_parent_id' + '}', CGI.escape(file_parent_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?
      query_params[:'name'] = opts[:'name'] if !opts[:'name'].nil?
      query_params[:'type'] = opts[:'type'] if !opts[:'type'].nil?
      query_params[:'size'] = opts[:'size'] if !opts[:'size'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'OnTapesFileCollection' 

      # auth_names
      auth_names = opts[:auth_names] || ['BasicAuth', 'BearerAuth']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: FilesApi#on_tapes_files_children_by_pool\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Displays a specific file.
    # **API Key Scope**: files / show
    # @param file_id [Integer] Numeric ID of file.
    # @param [Hash] opts the optional parameters
    # @return [NodeumFileWithPath]
    def show_file(file_id, opts = {})
      data, _status_code, _headers = show_file_with_http_info(file_id, opts)
      data
    end

    # Displays a specific file.
    # **API Key Scope**: files / show
    # @param file_id [Integer] Numeric ID of file.
    # @param [Hash] opts the optional parameters
    # @return [Array<(NodeumFileWithPath, Integer, Hash)>] NodeumFileWithPath data, response status code and response headers
    def show_file_with_http_info(file_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: FilesApi.show_file ...'
      end
      # verify the required parameter 'file_id' is set
      if @api_client.config.client_side_validation && file_id.nil?
        fail ArgumentError, "Missing the required parameter 'file_id' when calling FilesApi.show_file"
      end
      # resource path
      local_var_path = '/files/{file_id}'.sub('{' + 'file_id' + '}', CGI.escape(file_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'NodeumFileWithPath' 

      # auth_names
      auth_names = opts[:auth_names] || ['BasicAuth', 'BearerAuth']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: FilesApi#show_file\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Displays a specific file.
    # **API Key Scope**: files / show
    # @param container_id [String] Numeric ID or name of container.
    # @param file_id [Integer] Numeric ID of file.
    # @param [Hash] opts the optional parameters
    # @return [NodeumFileWithPath]
    def show_file_by_container(container_id, file_id, opts = {})
      data, _status_code, _headers = show_file_by_container_with_http_info(container_id, file_id, opts)
      data
    end

    # Displays a specific file.
    # **API Key Scope**: files / show
    # @param container_id [String] Numeric ID or name of container.
    # @param file_id [Integer] Numeric ID of file.
    # @param [Hash] opts the optional parameters
    # @return [Array<(NodeumFileWithPath, Integer, Hash)>] NodeumFileWithPath data, response status code and response headers
    def show_file_by_container_with_http_info(container_id, file_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: FilesApi.show_file_by_container ...'
      end
      # verify the required parameter 'container_id' is set
      if @api_client.config.client_side_validation && container_id.nil?
        fail ArgumentError, "Missing the required parameter 'container_id' when calling FilesApi.show_file_by_container"
      end
      # verify the required parameter 'file_id' is set
      if @api_client.config.client_side_validation && file_id.nil?
        fail ArgumentError, "Missing the required parameter 'file_id' when calling FilesApi.show_file_by_container"
      end
      # resource path
      local_var_path = '/containers/{container_id}/files/{file_id}'.sub('{' + 'container_id' + '}', CGI.escape(container_id.to_s)).sub('{' + 'file_id' + '}', CGI.escape(file_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'NodeumFileWithPath' 

      # auth_names
      auth_names = opts[:auth_names] || ['BasicAuth', 'BearerAuth']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: FilesApi#show_file_by_container\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Displays a specific file.
    # **API Key Scope**: files / show
    # @param pool_id [String] Numeric ID, or name of pool.
    # @param file_id [Integer] Numeric ID of file.
    # @param [Hash] opts the optional parameters
    # @return [NodeumFileWithPath]
    def show_file_by_pool(pool_id, file_id, opts = {})
      data, _status_code, _headers = show_file_by_pool_with_http_info(pool_id, file_id, opts)
      data
    end

    # Displays a specific file.
    # **API Key Scope**: files / show
    # @param pool_id [String] Numeric ID, or name of pool.
    # @param file_id [Integer] Numeric ID of file.
    # @param [Hash] opts the optional parameters
    # @return [Array<(NodeumFileWithPath, Integer, Hash)>] NodeumFileWithPath data, response status code and response headers
    def show_file_by_pool_with_http_info(pool_id, file_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: FilesApi.show_file_by_pool ...'
      end
      # verify the required parameter 'pool_id' is set
      if @api_client.config.client_side_validation && pool_id.nil?
        fail ArgumentError, "Missing the required parameter 'pool_id' when calling FilesApi.show_file_by_pool"
      end
      # verify the required parameter 'file_id' is set
      if @api_client.config.client_side_validation && file_id.nil?
        fail ArgumentError, "Missing the required parameter 'file_id' when calling FilesApi.show_file_by_pool"
      end
      # resource path
      local_var_path = '/pools/{pool_id}/files/{file_id}'.sub('{' + 'pool_id' + '}', CGI.escape(pool_id.to_s)).sub('{' + 'file_id' + '}', CGI.escape(file_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'NodeumFileWithPath' 

      # auth_names
      auth_names = opts[:auth_names] || ['BasicAuth', 'BearerAuth']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: FilesApi#show_file_by_pool\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Displays a specific file.
    # **API Key Scope**: files / show
    # @param task_id [String] Numeric ID or name of task. Task names are not unique, it&#39;s recommanded to use numeric ID.
    # @param file_id [Integer] Numeric ID of file.
    # @param [Hash] opts the optional parameters
    # @return [NodeumFileWithPath]
    def show_file_by_task(task_id, file_id, opts = {})
      data, _status_code, _headers = show_file_by_task_with_http_info(task_id, file_id, opts)
      data
    end

    # Displays a specific file.
    # **API Key Scope**: files / show
    # @param task_id [String] Numeric ID or name of task. Task names are not unique, it&#39;s recommanded to use numeric ID.
    # @param file_id [Integer] Numeric ID of file.
    # @param [Hash] opts the optional parameters
    # @return [Array<(NodeumFileWithPath, Integer, Hash)>] NodeumFileWithPath data, response status code and response headers
    def show_file_by_task_with_http_info(task_id, file_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: FilesApi.show_file_by_task ...'
      end
      # verify the required parameter 'task_id' is set
      if @api_client.config.client_side_validation && task_id.nil?
        fail ArgumentError, "Missing the required parameter 'task_id' when calling FilesApi.show_file_by_task"
      end
      # verify the required parameter 'file_id' is set
      if @api_client.config.client_side_validation && file_id.nil?
        fail ArgumentError, "Missing the required parameter 'file_id' when calling FilesApi.show_file_by_task"
      end
      # resource path
      local_var_path = '/tasks/{task_id}/files/{file_id}'.sub('{' + 'task_id' + '}', CGI.escape(task_id.to_s)).sub('{' + 'file_id' + '}', CGI.escape(file_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'NodeumFileWithPath' 

      # auth_names
      auth_names = opts[:auth_names] || ['BasicAuth', 'BearerAuth']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: FilesApi#show_file_by_task\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Displays a specific file.
    # **API Key Scope**: files / show
    # @param task_execution_id [String] Numeric ID of task execution.
    # @param file_id [Integer] Numeric ID of file.
    # @param [Hash] opts the optional parameters
    # @return [NodeumFileWithPath]
    def show_file_by_task_execution(task_execution_id, file_id, opts = {})
      data, _status_code, _headers = show_file_by_task_execution_with_http_info(task_execution_id, file_id, opts)
      data
    end

    # Displays a specific file.
    # **API Key Scope**: files / show
    # @param task_execution_id [String] Numeric ID of task execution.
    # @param file_id [Integer] Numeric ID of file.
    # @param [Hash] opts the optional parameters
    # @return [Array<(NodeumFileWithPath, Integer, Hash)>] NodeumFileWithPath data, response status code and response headers
    def show_file_by_task_execution_with_http_info(task_execution_id, file_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: FilesApi.show_file_by_task_execution ...'
      end
      # verify the required parameter 'task_execution_id' is set
      if @api_client.config.client_side_validation && task_execution_id.nil?
        fail ArgumentError, "Missing the required parameter 'task_execution_id' when calling FilesApi.show_file_by_task_execution"
      end
      # verify the required parameter 'file_id' is set
      if @api_client.config.client_side_validation && file_id.nil?
        fail ArgumentError, "Missing the required parameter 'file_id' when calling FilesApi.show_file_by_task_execution"
      end
      # resource path
      local_var_path = '/task_executions/{task_execution_id}/files/{file_id}'.sub('{' + 'task_execution_id' + '}', CGI.escape(task_execution_id.to_s)).sub('{' + 'file_id' + '}', CGI.escape(file_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'NodeumFileWithPath' 

      # auth_names
      auth_names = opts[:auth_names] || ['BasicAuth', 'BearerAuth']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: FilesApi#show_file_by_task_execution\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Displays a specific file.
    # **API Key Scope**: files / show
    # @param task_id [String] Numeric ID or name of task. Task names are not unique, it&#39;s recommanded to use numeric ID.
    # @param task_execution_id [String] Numeric ID of task execution.
    # @param file_id [Integer] Numeric ID of file.
    # @param [Hash] opts the optional parameters
    # @return [NodeumFileWithPath]
    def show_file_by_task_execution_by_task(task_id, task_execution_id, file_id, opts = {})
      data, _status_code, _headers = show_file_by_task_execution_by_task_with_http_info(task_id, task_execution_id, file_id, opts)
      data
    end

    # Displays a specific file.
    # **API Key Scope**: files / show
    # @param task_id [String] Numeric ID or name of task. Task names are not unique, it&#39;s recommanded to use numeric ID.
    # @param task_execution_id [String] Numeric ID of task execution.
    # @param file_id [Integer] Numeric ID of file.
    # @param [Hash] opts the optional parameters
    # @return [Array<(NodeumFileWithPath, Integer, Hash)>] NodeumFileWithPath data, response status code and response headers
    def show_file_by_task_execution_by_task_with_http_info(task_id, task_execution_id, file_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: FilesApi.show_file_by_task_execution_by_task ...'
      end
      # verify the required parameter 'task_id' is set
      if @api_client.config.client_side_validation && task_id.nil?
        fail ArgumentError, "Missing the required parameter 'task_id' when calling FilesApi.show_file_by_task_execution_by_task"
      end
      # verify the required parameter 'task_execution_id' is set
      if @api_client.config.client_side_validation && task_execution_id.nil?
        fail ArgumentError, "Missing the required parameter 'task_execution_id' when calling FilesApi.show_file_by_task_execution_by_task"
      end
      # verify the required parameter 'file_id' is set
      if @api_client.config.client_side_validation && file_id.nil?
        fail ArgumentError, "Missing the required parameter 'file_id' when calling FilesApi.show_file_by_task_execution_by_task"
      end
      # resource path
      local_var_path = '/tasks/{task_id}/task_executions/{task_execution_id}/files/{file_id}'.sub('{' + 'task_id' + '}', CGI.escape(task_id.to_s)).sub('{' + 'task_execution_id' + '}', CGI.escape(task_execution_id.to_s)).sub('{' + 'file_id' + '}', CGI.escape(file_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'NodeumFileWithPath' 

      # auth_names
      auth_names = opts[:auth_names] || ['BasicAuth', 'BearerAuth']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: FilesApi#show_file_by_task_execution_by_task\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Displays a specific file on tape of pools, specific for Data Exchange.
    # **API Key Scope**: import_files / show
    # @param pool_id [String] Numeric ID, or name of pool.
    # @param file_id [Integer] Numeric ID of file.
    # @param [Hash] opts the optional parameters
    # @return [ImportFileWithPath]
    def show_import_file_by_pool(pool_id, file_id, opts = {})
      data, _status_code, _headers = show_import_file_by_pool_with_http_info(pool_id, file_id, opts)
      data
    end

    # Displays a specific file on tape of pools, specific for Data Exchange.
    # **API Key Scope**: import_files / show
    # @param pool_id [String] Numeric ID, or name of pool.
    # @param file_id [Integer] Numeric ID of file.
    # @param [Hash] opts the optional parameters
    # @return [Array<(ImportFileWithPath, Integer, Hash)>] ImportFileWithPath data, response status code and response headers
    def show_import_file_by_pool_with_http_info(pool_id, file_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: FilesApi.show_import_file_by_pool ...'
      end
      # verify the required parameter 'pool_id' is set
      if @api_client.config.client_side_validation && pool_id.nil?
        fail ArgumentError, "Missing the required parameter 'pool_id' when calling FilesApi.show_import_file_by_pool"
      end
      # verify the required parameter 'file_id' is set
      if @api_client.config.client_side_validation && file_id.nil?
        fail ArgumentError, "Missing the required parameter 'file_id' when calling FilesApi.show_import_file_by_pool"
      end
      # resource path
      local_var_path = '/pools/{pool_id}/import_files/{file_id}'.sub('{' + 'pool_id' + '}', CGI.escape(pool_id.to_s)).sub('{' + 'file_id' + '}', CGI.escape(file_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'ImportFileWithPath' 

      # auth_names
      auth_names = opts[:auth_names] || ['BasicAuth', 'BearerAuth']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: FilesApi#show_import_file_by_pool\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Displays a specific file on tape of pools, specific for Active and Offline.
    # **API Key Scope**: on_tapes_files / show
    # @param pool_id [String] Numeric ID, or name of pool.
    # @param file_id [Integer] Numeric ID of file.
    # @param [Hash] opts the optional parameters
    # @return [OnTapesFile]
    def show_on_tape_file_by_pool(pool_id, file_id, opts = {})
      data, _status_code, _headers = show_on_tape_file_by_pool_with_http_info(pool_id, file_id, opts)
      data
    end

    # Displays a specific file on tape of pools, specific for Active and Offline.
    # **API Key Scope**: on_tapes_files / show
    # @param pool_id [String] Numeric ID, or name of pool.
    # @param file_id [Integer] Numeric ID of file.
    # @param [Hash] opts the optional parameters
    # @return [Array<(OnTapesFile, Integer, Hash)>] OnTapesFile data, response status code and response headers
    def show_on_tape_file_by_pool_with_http_info(pool_id, file_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: FilesApi.show_on_tape_file_by_pool ...'
      end
      # verify the required parameter 'pool_id' is set
      if @api_client.config.client_side_validation && pool_id.nil?
        fail ArgumentError, "Missing the required parameter 'pool_id' when calling FilesApi.show_on_tape_file_by_pool"
      end
      # verify the required parameter 'file_id' is set
      if @api_client.config.client_side_validation && file_id.nil?
        fail ArgumentError, "Missing the required parameter 'file_id' when calling FilesApi.show_on_tape_file_by_pool"
      end
      # resource path
      local_var_path = '/pools/{pool_id}/on_tapes_files/{file_id}'.sub('{' + 'pool_id' + '}', CGI.escape(pool_id.to_s)).sub('{' + 'file_id' + '}', CGI.escape(file_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'OnTapesFile' 

      # auth_names
      auth_names = opts[:auth_names] || ['BasicAuth', 'BearerAuth']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: FilesApi#show_on_tape_file_by_pool\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
